generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:TWq3a9gcaHyqLCX@localhost:5433"
}

enum UserType {
  leaser
  subleaser
  administrator
}

enum ReservationStatus {
  pending
  confirmed
  canceled
}

enum AgreementStatus {
  pending
  active
  terminated
}

enum AvailabilityStatus {
  available
  booked
}

model User {
  user_id          Int                 @id @default(autoincrement())
  username         String              @unique
  email            String              @unique
  password_hash    String
  profile_picture  String?
  user_type        UserType
  ownedLots        ParkingLot[]        @relation("lotOwner")
  reservations     Reservation[]
  sentMessages     Message[]           @relation("messageSender")
  receivedMessages Message[]           @relation("messageReceiver")
  originalLeases   SubleaseAgreement[] @relation("originalLeaser")
  subLeases        SubleaseAgreement[] @relation("subLeaser")
  reviews          Review[]
}

model ParkingLot {
  lot_id         Int           @id @default(autoincrement())
  name           String
  address        String
  description    String?
  latitude       Float
  longitude      Float
  total_spots    Int
  spot_numbering Boolean
  owner_id       Int
  owner          User          @relation("lotOwner", fields: [owner_id], references: [user_id])
  parkingSpots   ParkingSpot[]
  reviews        Review[]
}

model ParkingSpot {
  spot_id            Int                 @id @default(autoincrement())
  lot_id             Int
  spot_number        Int?
  reservable         Boolean
  description        String?
  price              Float
  lot                ParkingLot          @relation(fields: [lot_id], references: [lot_id])
  reservations       Reservation[]
  is_reserved    Boolean                 @default(false)
  subleaseAgreements SubleaseAgreement[]
  availabilities     SpotAvailability[]
}

model Reservation {
  reservation_id   Int               @id @default(autoincrement())
  spot_id          Int
  user_id          Int
  start_time       DateTime
  end_time         DateTime
  status           ReservationStatus
  parkingSpot      ParkingSpot       @relation(fields: [spot_id], references: [spot_id])
  user             User              @relation(fields: [user_id], references: [user_id])
  availability_id  Int?
  spotAvailability SpotAvailability? @relation(fields: [availability_id], references: [availability_id])
}

model SpotAvailability {
  availability_id Int                @id @default(autoincrement())
  spot_id         Int
  start_time      DateTime
  end_time        DateTime
  status          AvailabilityStatus
  parkingSpot     ParkingSpot        @relation(fields: [spot_id], references: [spot_id])
  reservations    Reservation[]

  @@unique([spot_id, start_time, end_time], name: "unique_spot_availability")
}

model Review {
  review_id  Int        @id @default(autoincrement())
  lot_id     Int
  user_id    Int
  rating     Int
  comment    String?
  created_at DateTime   @default(now())
  parkingLot ParkingLot @relation(fields: [lot_id], references: [lot_id])
  user       User       @relation(fields: [user_id], references: [user_id])
}

model Message {
  message_id   Int      @id @default(autoincrement())
  sender_id    Int
  receiver_id  Int
  message_text String
  created_at   DateTime @default(now())
  sender       User     @relation("messageSender", fields: [sender_id], references: [user_id])
  receiver     User     @relation("messageReceiver", fields: [receiver_id], references: [user_id])
}

model SubleaseAgreement {
  agreement_id       Int             @id @default(autoincrement())
  original_leaser_id Int
  subleaser_id       Int
  spot_id            Int
  start_date         DateTime
  end_date           DateTime
  status             AgreementStatus
  originalLeaser     User            @relation("originalLeaser", fields: [original_leaser_id], references: [user_id])
  subLeaser          User            @relation("subLeaser", fields: [subleaser_id], references: [user_id])
  parkingSpot        ParkingSpot     @relation(fields: [spot_id], references: [spot_id])
}
