
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ParkingLot
 * 
 */
export type ParkingLot = $Result.DefaultSelection<Prisma.$ParkingLotPayload>
/**
 * Model ParkingSpot
 * 
 */
export type ParkingSpot = $Result.DefaultSelection<Prisma.$ParkingSpotPayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model SpotAvailability
 * 
 */
export type SpotAvailability = $Result.DefaultSelection<Prisma.$SpotAvailabilityPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model SubleaseAgreement
 * 
 */
export type SubleaseAgreement = $Result.DefaultSelection<Prisma.$SubleaseAgreementPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserType: {
  leaser: 'leaser',
  subleaser: 'subleaser',
  administrator: 'administrator'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const ReservationStatus: {
  pending: 'pending',
  confirmed: 'confirmed',
  canceled: 'canceled'
};

export type ReservationStatus = (typeof ReservationStatus)[keyof typeof ReservationStatus]


export const AvailabilityStatus: {
  available: 'available',
  booked: 'booked'
};

export type AvailabilityStatus = (typeof AvailabilityStatus)[keyof typeof AvailabilityStatus]


export const AgreementStatus: {
  pending: 'pending',
  active: 'active',
  terminated: 'terminated'
};

export type AgreementStatus = (typeof AgreementStatus)[keyof typeof AgreementStatus]

}

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type ReservationStatus = $Enums.ReservationStatus

export const ReservationStatus: typeof $Enums.ReservationStatus

export type AvailabilityStatus = $Enums.AvailabilityStatus

export const AvailabilityStatus: typeof $Enums.AvailabilityStatus

export type AgreementStatus = $Enums.AgreementStatus

export const AgreementStatus: typeof $Enums.AgreementStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.parkingLot`: Exposes CRUD operations for the **ParkingLot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParkingLots
    * const parkingLots = await prisma.parkingLot.findMany()
    * ```
    */
  get parkingLot(): Prisma.ParkingLotDelegate<ExtArgs>;

  /**
   * `prisma.parkingSpot`: Exposes CRUD operations for the **ParkingSpot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParkingSpots
    * const parkingSpots = await prisma.parkingSpot.findMany()
    * ```
    */
  get parkingSpot(): Prisma.ParkingSpotDelegate<ExtArgs>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs>;

  /**
   * `prisma.spotAvailability`: Exposes CRUD operations for the **SpotAvailability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SpotAvailabilities
    * const spotAvailabilities = await prisma.spotAvailability.findMany()
    * ```
    */
  get spotAvailability(): Prisma.SpotAvailabilityDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.subleaseAgreement`: Exposes CRUD operations for the **SubleaseAgreement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubleaseAgreements
    * const subleaseAgreements = await prisma.subleaseAgreement.findMany()
    * ```
    */
  get subleaseAgreement(): Prisma.SubleaseAgreementDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ParkingLot: 'ParkingLot',
    ParkingSpot: 'ParkingSpot',
    Reservation: 'Reservation',
    SpotAvailability: 'SpotAvailability',
    Review: 'Review',
    Message: 'Message',
    SubleaseAgreement: 'SubleaseAgreement'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'parkingLot' | 'parkingSpot' | 'reservation' | 'spotAvailability' | 'review' | 'message' | 'subleaseAgreement'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ParkingLot: {
        payload: Prisma.$ParkingLotPayload<ExtArgs>
        fields: Prisma.ParkingLotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParkingLotFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParkingLotFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          findFirst: {
            args: Prisma.ParkingLotFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParkingLotFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          findMany: {
            args: Prisma.ParkingLotFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>[]
          }
          create: {
            args: Prisma.ParkingLotCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          createMany: {
            args: Prisma.ParkingLotCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParkingLotDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          update: {
            args: Prisma.ParkingLotUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          deleteMany: {
            args: Prisma.ParkingLotDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParkingLotUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParkingLotUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          aggregate: {
            args: Prisma.ParkingLotAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParkingLot>
          }
          groupBy: {
            args: Prisma.ParkingLotGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParkingLotGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParkingLotCountArgs<ExtArgs>,
            result: $Utils.Optional<ParkingLotCountAggregateOutputType> | number
          }
        }
      }
      ParkingSpot: {
        payload: Prisma.$ParkingSpotPayload<ExtArgs>
        fields: Prisma.ParkingSpotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParkingSpotFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParkingSpotFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>
          }
          findFirst: {
            args: Prisma.ParkingSpotFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParkingSpotFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>
          }
          findMany: {
            args: Prisma.ParkingSpotFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>[]
          }
          create: {
            args: Prisma.ParkingSpotCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>
          }
          createMany: {
            args: Prisma.ParkingSpotCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParkingSpotDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>
          }
          update: {
            args: Prisma.ParkingSpotUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>
          }
          deleteMany: {
            args: Prisma.ParkingSpotDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParkingSpotUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParkingSpotUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingSpotPayload>
          }
          aggregate: {
            args: Prisma.ParkingSpotAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParkingSpot>
          }
          groupBy: {
            args: Prisma.ParkingSpotGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParkingSpotGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParkingSpotCountArgs<ExtArgs>,
            result: $Utils.Optional<ParkingSpotCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>,
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      SpotAvailability: {
        payload: Prisma.$SpotAvailabilityPayload<ExtArgs>
        fields: Prisma.SpotAvailabilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpotAvailabilityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpotAvailabilityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>
          }
          findFirst: {
            args: Prisma.SpotAvailabilityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpotAvailabilityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>
          }
          findMany: {
            args: Prisma.SpotAvailabilityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>[]
          }
          create: {
            args: Prisma.SpotAvailabilityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>
          }
          createMany: {
            args: Prisma.SpotAvailabilityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SpotAvailabilityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>
          }
          update: {
            args: Prisma.SpotAvailabilityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>
          }
          deleteMany: {
            args: Prisma.SpotAvailabilityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SpotAvailabilityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SpotAvailabilityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpotAvailabilityPayload>
          }
          aggregate: {
            args: Prisma.SpotAvailabilityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpotAvailability>
          }
          groupBy: {
            args: Prisma.SpotAvailabilityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SpotAvailabilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpotAvailabilityCountArgs<ExtArgs>,
            result: $Utils.Optional<SpotAvailabilityCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>,
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      SubleaseAgreement: {
        payload: Prisma.$SubleaseAgreementPayload<ExtArgs>
        fields: Prisma.SubleaseAgreementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubleaseAgreementFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubleaseAgreementFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>
          }
          findFirst: {
            args: Prisma.SubleaseAgreementFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubleaseAgreementFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>
          }
          findMany: {
            args: Prisma.SubleaseAgreementFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>[]
          }
          create: {
            args: Prisma.SubleaseAgreementCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>
          }
          createMany: {
            args: Prisma.SubleaseAgreementCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubleaseAgreementDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>
          }
          update: {
            args: Prisma.SubleaseAgreementUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>
          }
          deleteMany: {
            args: Prisma.SubleaseAgreementDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubleaseAgreementUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubleaseAgreementUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubleaseAgreementPayload>
          }
          aggregate: {
            args: Prisma.SubleaseAgreementAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubleaseAgreement>
          }
          groupBy: {
            args: Prisma.SubleaseAgreementGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubleaseAgreementGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubleaseAgreementCountArgs<ExtArgs>,
            result: $Utils.Optional<SubleaseAgreementCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedLots: number
    reservations: number
    sentMessages: number
    receivedMessages: number
    originalLeases: number
    subLeases: number
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedLots?: boolean | UserCountOutputTypeCountOwnedLotsArgs
    reservations?: boolean | UserCountOutputTypeCountReservationsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    receivedMessages?: boolean | UserCountOutputTypeCountReceivedMessagesArgs
    originalLeases?: boolean | UserCountOutputTypeCountOriginalLeasesArgs
    subLeases?: boolean | UserCountOutputTypeCountSubLeasesArgs
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedLotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingLotWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOriginalLeasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubleaseAgreementWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubLeasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubleaseAgreementWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }



  /**
   * Count Type ParkingLotCountOutputType
   */

  export type ParkingLotCountOutputType = {
    parkingSpots: number
    reviews: number
  }

  export type ParkingLotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingSpots?: boolean | ParkingLotCountOutputTypeCountParkingSpotsArgs
    reviews?: boolean | ParkingLotCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes

  /**
   * ParkingLotCountOutputType without action
   */
  export type ParkingLotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLotCountOutputType
     */
    select?: ParkingLotCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParkingLotCountOutputType without action
   */
  export type ParkingLotCountOutputTypeCountParkingSpotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingSpotWhereInput
  }


  /**
   * ParkingLotCountOutputType without action
   */
  export type ParkingLotCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }



  /**
   * Count Type ParkingSpotCountOutputType
   */

  export type ParkingSpotCountOutputType = {
    reservations: number
    subleaseAgreements: number
    availabilities: number
  }

  export type ParkingSpotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | ParkingSpotCountOutputTypeCountReservationsArgs
    subleaseAgreements?: boolean | ParkingSpotCountOutputTypeCountSubleaseAgreementsArgs
    availabilities?: boolean | ParkingSpotCountOutputTypeCountAvailabilitiesArgs
  }

  // Custom InputTypes

  /**
   * ParkingSpotCountOutputType without action
   */
  export type ParkingSpotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpotCountOutputType
     */
    select?: ParkingSpotCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParkingSpotCountOutputType without action
   */
  export type ParkingSpotCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }


  /**
   * ParkingSpotCountOutputType without action
   */
  export type ParkingSpotCountOutputTypeCountSubleaseAgreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubleaseAgreementWhereInput
  }


  /**
   * ParkingSpotCountOutputType without action
   */
  export type ParkingSpotCountOutputTypeCountAvailabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpotAvailabilityWhereInput
  }



  /**
   * Count Type SpotAvailabilityCountOutputType
   */

  export type SpotAvailabilityCountOutputType = {
    reservations: number
  }

  export type SpotAvailabilityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | SpotAvailabilityCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes

  /**
   * SpotAvailabilityCountOutputType without action
   */
  export type SpotAvailabilityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailabilityCountOutputType
     */
    select?: SpotAvailabilityCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SpotAvailabilityCountOutputType without action
   */
  export type SpotAvailabilityCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    password_hash: string | null
    profile_picture: string | null
    user_type: $Enums.UserType | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    password_hash: string | null
    profile_picture: string | null
    user_type: $Enums.UserType | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    username: number
    email: number
    password_hash: number
    profile_picture: number
    user_type: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password_hash?: true
    profile_picture?: true
    user_type?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password_hash?: true
    profile_picture?: true
    user_type?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password_hash?: true
    profile_picture?: true
    user_type?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    username: string
    email: string
    password_hash: string
    profile_picture: string | null
    user_type: $Enums.UserType
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    password_hash?: boolean
    profile_picture?: boolean
    user_type?: boolean
    ownedLots?: boolean | User$ownedLotsArgs<ExtArgs>
    reservations?: boolean | User$reservationsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    originalLeases?: boolean | User$originalLeasesArgs<ExtArgs>
    subLeases?: boolean | User$subLeasesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    username?: boolean
    email?: boolean
    password_hash?: boolean
    profile_picture?: boolean
    user_type?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedLots?: boolean | User$ownedLotsArgs<ExtArgs>
    reservations?: boolean | User$reservationsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    receivedMessages?: boolean | User$receivedMessagesArgs<ExtArgs>
    originalLeases?: boolean | User$originalLeasesArgs<ExtArgs>
    subLeases?: boolean | User$subLeasesArgs<ExtArgs>
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedLots: Prisma.$ParkingLotPayload<ExtArgs>[]
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      receivedMessages: Prisma.$MessagePayload<ExtArgs>[]
      originalLeases: Prisma.$SubleaseAgreementPayload<ExtArgs>[]
      subLeases: Prisma.$SubleaseAgreementPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
      email: string
      password_hash: string
      profile_picture: string | null
      user_type: $Enums.UserType
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ownedLots<T extends User$ownedLotsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedLotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findMany'> | Null>;

    reservations<T extends User$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, User$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    receivedMessages<T extends User$receivedMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    originalLeases<T extends User$originalLeasesArgs<ExtArgs> = {}>(args?: Subset<T, User$originalLeasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findMany'> | Null>;

    subLeases<T extends User$subLeasesArgs<ExtArgs> = {}>(args?: Subset<T, User$subLeasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly profile_picture: FieldRef<"User", 'String'>
    readonly user_type: FieldRef<"User", 'UserType'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.ownedLots
   */
  export type User$ownedLotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    where?: ParkingLotWhereInput
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    cursor?: ParkingLotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * User.reservations
   */
  export type User$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User.receivedMessages
   */
  export type User$receivedMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * User.originalLeases
   */
  export type User$originalLeasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    where?: SubleaseAgreementWhereInput
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    cursor?: SubleaseAgreementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubleaseAgreementScalarFieldEnum | SubleaseAgreementScalarFieldEnum[]
  }


  /**
   * User.subLeases
   */
  export type User$subLeasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    where?: SubleaseAgreementWhereInput
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    cursor?: SubleaseAgreementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubleaseAgreementScalarFieldEnum | SubleaseAgreementScalarFieldEnum[]
  }


  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model ParkingLot
   */

  export type AggregateParkingLot = {
    _count: ParkingLotCountAggregateOutputType | null
    _avg: ParkingLotAvgAggregateOutputType | null
    _sum: ParkingLotSumAggregateOutputType | null
    _min: ParkingLotMinAggregateOutputType | null
    _max: ParkingLotMaxAggregateOutputType | null
  }

  export type ParkingLotAvgAggregateOutputType = {
    lot_id: number | null
    latitude: number | null
    longitude: number | null
    total_spots: number | null
    owner_id: number | null
  }

  export type ParkingLotSumAggregateOutputType = {
    lot_id: number | null
    latitude: number | null
    longitude: number | null
    total_spots: number | null
    owner_id: number | null
  }

  export type ParkingLotMinAggregateOutputType = {
    lot_id: number | null
    name: string | null
    address: string | null
    description: string | null
    latitude: number | null
    longitude: number | null
    total_spots: number | null
    spot_numbering: boolean | null
    owner_id: number | null
  }

  export type ParkingLotMaxAggregateOutputType = {
    lot_id: number | null
    name: string | null
    address: string | null
    description: string | null
    latitude: number | null
    longitude: number | null
    total_spots: number | null
    spot_numbering: boolean | null
    owner_id: number | null
  }

  export type ParkingLotCountAggregateOutputType = {
    lot_id: number
    name: number
    address: number
    description: number
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: number
    owner_id: number
    _all: number
  }


  export type ParkingLotAvgAggregateInputType = {
    lot_id?: true
    latitude?: true
    longitude?: true
    total_spots?: true
    owner_id?: true
  }

  export type ParkingLotSumAggregateInputType = {
    lot_id?: true
    latitude?: true
    longitude?: true
    total_spots?: true
    owner_id?: true
  }

  export type ParkingLotMinAggregateInputType = {
    lot_id?: true
    name?: true
    address?: true
    description?: true
    latitude?: true
    longitude?: true
    total_spots?: true
    spot_numbering?: true
    owner_id?: true
  }

  export type ParkingLotMaxAggregateInputType = {
    lot_id?: true
    name?: true
    address?: true
    description?: true
    latitude?: true
    longitude?: true
    total_spots?: true
    spot_numbering?: true
    owner_id?: true
  }

  export type ParkingLotCountAggregateInputType = {
    lot_id?: true
    name?: true
    address?: true
    description?: true
    latitude?: true
    longitude?: true
    total_spots?: true
    spot_numbering?: true
    owner_id?: true
    _all?: true
  }

  export type ParkingLotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingLot to aggregate.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParkingLots
    **/
    _count?: true | ParkingLotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParkingLotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParkingLotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkingLotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkingLotMaxAggregateInputType
  }

  export type GetParkingLotAggregateType<T extends ParkingLotAggregateArgs> = {
        [P in keyof T & keyof AggregateParkingLot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkingLot[P]>
      : GetScalarType<T[P], AggregateParkingLot[P]>
  }




  export type ParkingLotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingLotWhereInput
    orderBy?: ParkingLotOrderByWithAggregationInput | ParkingLotOrderByWithAggregationInput[]
    by: ParkingLotScalarFieldEnum[] | ParkingLotScalarFieldEnum
    having?: ParkingLotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkingLotCountAggregateInputType | true
    _avg?: ParkingLotAvgAggregateInputType
    _sum?: ParkingLotSumAggregateInputType
    _min?: ParkingLotMinAggregateInputType
    _max?: ParkingLotMaxAggregateInputType
  }

  export type ParkingLotGroupByOutputType = {
    lot_id: number
    name: string
    address: string
    description: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner_id: number
    _count: ParkingLotCountAggregateOutputType | null
    _avg: ParkingLotAvgAggregateOutputType | null
    _sum: ParkingLotSumAggregateOutputType | null
    _min: ParkingLotMinAggregateOutputType | null
    _max: ParkingLotMaxAggregateOutputType | null
  }

  type GetParkingLotGroupByPayload<T extends ParkingLotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParkingLotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkingLotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkingLotGroupByOutputType[P]>
            : GetScalarType<T[P], ParkingLotGroupByOutputType[P]>
        }
      >
    >


  export type ParkingLotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lot_id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    total_spots?: boolean
    spot_numbering?: boolean
    owner_id?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    parkingSpots?: boolean | ParkingLot$parkingSpotsArgs<ExtArgs>
    reviews?: boolean | ParkingLot$reviewsArgs<ExtArgs>
    _count?: boolean | ParkingLotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingLot"]>

  export type ParkingLotSelectScalar = {
    lot_id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    total_spots?: boolean
    spot_numbering?: boolean
    owner_id?: boolean
  }

  export type ParkingLotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    parkingSpots?: boolean | ParkingLot$parkingSpotsArgs<ExtArgs>
    reviews?: boolean | ParkingLot$reviewsArgs<ExtArgs>
    _count?: boolean | ParkingLotCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ParkingLotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParkingLot"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      parkingSpots: Prisma.$ParkingSpotPayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      lot_id: number
      name: string
      address: string
      description: string | null
      latitude: number
      longitude: number
      total_spots: number
      spot_numbering: boolean
      owner_id: number
    }, ExtArgs["result"]["parkingLot"]>
    composites: {}
  }


  type ParkingLotGetPayload<S extends boolean | null | undefined | ParkingLotDefaultArgs> = $Result.GetResult<Prisma.$ParkingLotPayload, S>

  type ParkingLotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParkingLotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParkingLotCountAggregateInputType | true
    }

  export interface ParkingLotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParkingLot'], meta: { name: 'ParkingLot' } }
    /**
     * Find zero or one ParkingLot that matches the filter.
     * @param {ParkingLotFindUniqueArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParkingLotFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotFindUniqueArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ParkingLot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParkingLotFindUniqueOrThrowArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParkingLotFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ParkingLot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotFindFirstArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParkingLotFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindFirstArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ParkingLot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotFindFirstOrThrowArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParkingLotFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ParkingLots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParkingLots
     * const parkingLots = await prisma.parkingLot.findMany()
     * 
     * // Get first 10 ParkingLots
     * const parkingLots = await prisma.parkingLot.findMany({ take: 10 })
     * 
     * // Only select the `lot_id`
     * const parkingLotWithLot_idOnly = await prisma.parkingLot.findMany({ select: { lot_id: true } })
     * 
    **/
    findMany<T extends ParkingLotFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ParkingLot.
     * @param {ParkingLotCreateArgs} args - Arguments to create a ParkingLot.
     * @example
     * // Create one ParkingLot
     * const ParkingLot = await prisma.parkingLot.create({
     *   data: {
     *     // ... data to create a ParkingLot
     *   }
     * })
     * 
    **/
    create<T extends ParkingLotCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotCreateArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ParkingLots.
     *     @param {ParkingLotCreateManyArgs} args - Arguments to create many ParkingLots.
     *     @example
     *     // Create many ParkingLots
     *     const parkingLot = await prisma.parkingLot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParkingLotCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParkingLot.
     * @param {ParkingLotDeleteArgs} args - Arguments to delete one ParkingLot.
     * @example
     * // Delete one ParkingLot
     * const ParkingLot = await prisma.parkingLot.delete({
     *   where: {
     *     // ... filter to delete one ParkingLot
     *   }
     * })
     * 
    **/
    delete<T extends ParkingLotDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotDeleteArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ParkingLot.
     * @param {ParkingLotUpdateArgs} args - Arguments to update one ParkingLot.
     * @example
     * // Update one ParkingLot
     * const parkingLot = await prisma.parkingLot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParkingLotUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotUpdateArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ParkingLots.
     * @param {ParkingLotDeleteManyArgs} args - Arguments to filter ParkingLots to delete.
     * @example
     * // Delete a few ParkingLots
     * const { count } = await prisma.parkingLot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParkingLotDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingLots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParkingLots
     * const parkingLot = await prisma.parkingLot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParkingLotUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParkingLot.
     * @param {ParkingLotUpsertArgs} args - Arguments to update or create a ParkingLot.
     * @example
     * // Update or create a ParkingLot
     * const parkingLot = await prisma.parkingLot.upsert({
     *   create: {
     *     // ... data to create a ParkingLot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParkingLot we want to update
     *   }
     * })
    **/
    upsert<T extends ParkingLotUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotUpsertArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ParkingLots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotCountArgs} args - Arguments to filter ParkingLots to count.
     * @example
     * // Count the number of ParkingLots
     * const count = await prisma.parkingLot.count({
     *   where: {
     *     // ... the filter for the ParkingLots we want to count
     *   }
     * })
    **/
    count<T extends ParkingLotCountArgs>(
      args?: Subset<T, ParkingLotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkingLotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParkingLot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkingLotAggregateArgs>(args: Subset<T, ParkingLotAggregateArgs>): Prisma.PrismaPromise<GetParkingLotAggregateType<T>>

    /**
     * Group by ParkingLot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkingLotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkingLotGroupByArgs['orderBy'] }
        : { orderBy?: ParkingLotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkingLotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkingLotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParkingLot model
   */
  readonly fields: ParkingLotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParkingLot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParkingLotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    parkingSpots<T extends ParkingLot$parkingSpotsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingLot$parkingSpotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findMany'> | Null>;

    reviews<T extends ParkingLot$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingLot$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ParkingLot model
   */ 
  interface ParkingLotFieldRefs {
    readonly lot_id: FieldRef<"ParkingLot", 'Int'>
    readonly name: FieldRef<"ParkingLot", 'String'>
    readonly address: FieldRef<"ParkingLot", 'String'>
    readonly description: FieldRef<"ParkingLot", 'String'>
    readonly latitude: FieldRef<"ParkingLot", 'Float'>
    readonly longitude: FieldRef<"ParkingLot", 'Float'>
    readonly total_spots: FieldRef<"ParkingLot", 'Int'>
    readonly spot_numbering: FieldRef<"ParkingLot", 'Boolean'>
    readonly owner_id: FieldRef<"ParkingLot", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ParkingLot findUnique
   */
  export type ParkingLotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot findUniqueOrThrow
   */
  export type ParkingLotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot findFirst
   */
  export type ParkingLotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingLots.
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingLots.
     */
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * ParkingLot findFirstOrThrow
   */
  export type ParkingLotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingLots.
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingLots.
     */
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * ParkingLot findMany
   */
  export type ParkingLotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLots to fetch.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParkingLots.
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * ParkingLot create
   */
  export type ParkingLotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * The data needed to create a ParkingLot.
     */
    data: XOR<ParkingLotCreateInput, ParkingLotUncheckedCreateInput>
  }


  /**
   * ParkingLot createMany
   */
  export type ParkingLotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParkingLots.
     */
    data: ParkingLotCreateManyInput | ParkingLotCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ParkingLot update
   */
  export type ParkingLotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * The data needed to update a ParkingLot.
     */
    data: XOR<ParkingLotUpdateInput, ParkingLotUncheckedUpdateInput>
    /**
     * Choose, which ParkingLot to update.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot updateMany
   */
  export type ParkingLotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParkingLots.
     */
    data: XOR<ParkingLotUpdateManyMutationInput, ParkingLotUncheckedUpdateManyInput>
    /**
     * Filter which ParkingLots to update
     */
    where?: ParkingLotWhereInput
  }


  /**
   * ParkingLot upsert
   */
  export type ParkingLotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * The filter to search for the ParkingLot to update in case it exists.
     */
    where: ParkingLotWhereUniqueInput
    /**
     * In case the ParkingLot found by the `where` argument doesn't exist, create a new ParkingLot with this data.
     */
    create: XOR<ParkingLotCreateInput, ParkingLotUncheckedCreateInput>
    /**
     * In case the ParkingLot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParkingLotUpdateInput, ParkingLotUncheckedUpdateInput>
  }


  /**
   * ParkingLot delete
   */
  export type ParkingLotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter which ParkingLot to delete.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot deleteMany
   */
  export type ParkingLotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingLots to delete
     */
    where?: ParkingLotWhereInput
  }


  /**
   * ParkingLot.parkingSpots
   */
  export type ParkingLot$parkingSpotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    where?: ParkingSpotWhereInput
    orderBy?: ParkingSpotOrderByWithRelationInput | ParkingSpotOrderByWithRelationInput[]
    cursor?: ParkingSpotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParkingSpotScalarFieldEnum | ParkingSpotScalarFieldEnum[]
  }


  /**
   * ParkingLot.reviews
   */
  export type ParkingLot$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * ParkingLot without action
   */
  export type ParkingLotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
  }



  /**
   * Model ParkingSpot
   */

  export type AggregateParkingSpot = {
    _count: ParkingSpotCountAggregateOutputType | null
    _avg: ParkingSpotAvgAggregateOutputType | null
    _sum: ParkingSpotSumAggregateOutputType | null
    _min: ParkingSpotMinAggregateOutputType | null
    _max: ParkingSpotMaxAggregateOutputType | null
  }

  export type ParkingSpotAvgAggregateOutputType = {
    spot_id: number | null
    lot_id: number | null
    spot_number: number | null
    price: number | null
  }

  export type ParkingSpotSumAggregateOutputType = {
    spot_id: number | null
    lot_id: number | null
    spot_number: number | null
    price: number | null
  }

  export type ParkingSpotMinAggregateOutputType = {
    spot_id: number | null
    lot_id: number | null
    spot_number: number | null
    reservable: boolean | null
    description: string | null
    price: number | null
    is_reserved: boolean | null
  }

  export type ParkingSpotMaxAggregateOutputType = {
    spot_id: number | null
    lot_id: number | null
    spot_number: number | null
    reservable: boolean | null
    description: string | null
    price: number | null
    is_reserved: boolean | null
  }

  export type ParkingSpotCountAggregateOutputType = {
    spot_id: number
    lot_id: number
    spot_number: number
    reservable: number
    description: number
    price: number
    is_reserved: number
    _all: number
  }


  export type ParkingSpotAvgAggregateInputType = {
    spot_id?: true
    lot_id?: true
    spot_number?: true
    price?: true
  }

  export type ParkingSpotSumAggregateInputType = {
    spot_id?: true
    lot_id?: true
    spot_number?: true
    price?: true
  }

  export type ParkingSpotMinAggregateInputType = {
    spot_id?: true
    lot_id?: true
    spot_number?: true
    reservable?: true
    description?: true
    price?: true
    is_reserved?: true
  }

  export type ParkingSpotMaxAggregateInputType = {
    spot_id?: true
    lot_id?: true
    spot_number?: true
    reservable?: true
    description?: true
    price?: true
    is_reserved?: true
  }

  export type ParkingSpotCountAggregateInputType = {
    spot_id?: true
    lot_id?: true
    spot_number?: true
    reservable?: true
    description?: true
    price?: true
    is_reserved?: true
    _all?: true
  }

  export type ParkingSpotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingSpot to aggregate.
     */
    where?: ParkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingSpots to fetch.
     */
    orderBy?: ParkingSpotOrderByWithRelationInput | ParkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingSpots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParkingSpots
    **/
    _count?: true | ParkingSpotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParkingSpotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParkingSpotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkingSpotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkingSpotMaxAggregateInputType
  }

  export type GetParkingSpotAggregateType<T extends ParkingSpotAggregateArgs> = {
        [P in keyof T & keyof AggregateParkingSpot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkingSpot[P]>
      : GetScalarType<T[P], AggregateParkingSpot[P]>
  }




  export type ParkingSpotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingSpotWhereInput
    orderBy?: ParkingSpotOrderByWithAggregationInput | ParkingSpotOrderByWithAggregationInput[]
    by: ParkingSpotScalarFieldEnum[] | ParkingSpotScalarFieldEnum
    having?: ParkingSpotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkingSpotCountAggregateInputType | true
    _avg?: ParkingSpotAvgAggregateInputType
    _sum?: ParkingSpotSumAggregateInputType
    _min?: ParkingSpotMinAggregateInputType
    _max?: ParkingSpotMaxAggregateInputType
  }

  export type ParkingSpotGroupByOutputType = {
    spot_id: number
    lot_id: number
    spot_number: number | null
    reservable: boolean
    description: string | null
    price: number
    is_reserved: boolean
    _count: ParkingSpotCountAggregateOutputType | null
    _avg: ParkingSpotAvgAggregateOutputType | null
    _sum: ParkingSpotSumAggregateOutputType | null
    _min: ParkingSpotMinAggregateOutputType | null
    _max: ParkingSpotMaxAggregateOutputType | null
  }

  type GetParkingSpotGroupByPayload<T extends ParkingSpotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParkingSpotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkingSpotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkingSpotGroupByOutputType[P]>
            : GetScalarType<T[P], ParkingSpotGroupByOutputType[P]>
        }
      >
    >


  export type ParkingSpotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    spot_id?: boolean
    lot_id?: boolean
    spot_number?: boolean
    reservable?: boolean
    description?: boolean
    price?: boolean
    is_reserved?: boolean
    lot?: boolean | ParkingLotDefaultArgs<ExtArgs>
    reservations?: boolean | ParkingSpot$reservationsArgs<ExtArgs>
    subleaseAgreements?: boolean | ParkingSpot$subleaseAgreementsArgs<ExtArgs>
    availabilities?: boolean | ParkingSpot$availabilitiesArgs<ExtArgs>
    _count?: boolean | ParkingSpotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingSpot"]>

  export type ParkingSpotSelectScalar = {
    spot_id?: boolean
    lot_id?: boolean
    spot_number?: boolean
    reservable?: boolean
    description?: boolean
    price?: boolean
    is_reserved?: boolean
  }

  export type ParkingSpotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lot?: boolean | ParkingLotDefaultArgs<ExtArgs>
    reservations?: boolean | ParkingSpot$reservationsArgs<ExtArgs>
    subleaseAgreements?: boolean | ParkingSpot$subleaseAgreementsArgs<ExtArgs>
    availabilities?: boolean | ParkingSpot$availabilitiesArgs<ExtArgs>
    _count?: boolean | ParkingSpotCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ParkingSpotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParkingSpot"
    objects: {
      lot: Prisma.$ParkingLotPayload<ExtArgs>
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
      subleaseAgreements: Prisma.$SubleaseAgreementPayload<ExtArgs>[]
      availabilities: Prisma.$SpotAvailabilityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      spot_id: number
      lot_id: number
      spot_number: number | null
      reservable: boolean
      description: string | null
      price: number
      is_reserved: boolean
    }, ExtArgs["result"]["parkingSpot"]>
    composites: {}
  }


  type ParkingSpotGetPayload<S extends boolean | null | undefined | ParkingSpotDefaultArgs> = $Result.GetResult<Prisma.$ParkingSpotPayload, S>

  type ParkingSpotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParkingSpotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParkingSpotCountAggregateInputType | true
    }

  export interface ParkingSpotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParkingSpot'], meta: { name: 'ParkingSpot' } }
    /**
     * Find zero or one ParkingSpot that matches the filter.
     * @param {ParkingSpotFindUniqueArgs} args - Arguments to find a ParkingSpot
     * @example
     * // Get one ParkingSpot
     * const parkingSpot = await prisma.parkingSpot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParkingSpotFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingSpotFindUniqueArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ParkingSpot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParkingSpotFindUniqueOrThrowArgs} args - Arguments to find a ParkingSpot
     * @example
     * // Get one ParkingSpot
     * const parkingSpot = await prisma.parkingSpot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParkingSpotFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingSpotFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ParkingSpot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotFindFirstArgs} args - Arguments to find a ParkingSpot
     * @example
     * // Get one ParkingSpot
     * const parkingSpot = await prisma.parkingSpot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParkingSpotFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingSpotFindFirstArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ParkingSpot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotFindFirstOrThrowArgs} args - Arguments to find a ParkingSpot
     * @example
     * // Get one ParkingSpot
     * const parkingSpot = await prisma.parkingSpot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParkingSpotFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingSpotFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ParkingSpots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParkingSpots
     * const parkingSpots = await prisma.parkingSpot.findMany()
     * 
     * // Get first 10 ParkingSpots
     * const parkingSpots = await prisma.parkingSpot.findMany({ take: 10 })
     * 
     * // Only select the `spot_id`
     * const parkingSpotWithSpot_idOnly = await prisma.parkingSpot.findMany({ select: { spot_id: true } })
     * 
    **/
    findMany<T extends ParkingSpotFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingSpotFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ParkingSpot.
     * @param {ParkingSpotCreateArgs} args - Arguments to create a ParkingSpot.
     * @example
     * // Create one ParkingSpot
     * const ParkingSpot = await prisma.parkingSpot.create({
     *   data: {
     *     // ... data to create a ParkingSpot
     *   }
     * })
     * 
    **/
    create<T extends ParkingSpotCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingSpotCreateArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ParkingSpots.
     *     @param {ParkingSpotCreateManyArgs} args - Arguments to create many ParkingSpots.
     *     @example
     *     // Create many ParkingSpots
     *     const parkingSpot = await prisma.parkingSpot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParkingSpotCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingSpotCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParkingSpot.
     * @param {ParkingSpotDeleteArgs} args - Arguments to delete one ParkingSpot.
     * @example
     * // Delete one ParkingSpot
     * const ParkingSpot = await prisma.parkingSpot.delete({
     *   where: {
     *     // ... filter to delete one ParkingSpot
     *   }
     * })
     * 
    **/
    delete<T extends ParkingSpotDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingSpotDeleteArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ParkingSpot.
     * @param {ParkingSpotUpdateArgs} args - Arguments to update one ParkingSpot.
     * @example
     * // Update one ParkingSpot
     * const parkingSpot = await prisma.parkingSpot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParkingSpotUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingSpotUpdateArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ParkingSpots.
     * @param {ParkingSpotDeleteManyArgs} args - Arguments to filter ParkingSpots to delete.
     * @example
     * // Delete a few ParkingSpots
     * const { count } = await prisma.parkingSpot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParkingSpotDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingSpotDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingSpots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParkingSpots
     * const parkingSpot = await prisma.parkingSpot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParkingSpotUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingSpotUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParkingSpot.
     * @param {ParkingSpotUpsertArgs} args - Arguments to update or create a ParkingSpot.
     * @example
     * // Update or create a ParkingSpot
     * const parkingSpot = await prisma.parkingSpot.upsert({
     *   create: {
     *     // ... data to create a ParkingSpot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParkingSpot we want to update
     *   }
     * })
    **/
    upsert<T extends ParkingSpotUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingSpotUpsertArgs<ExtArgs>>
    ): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ParkingSpots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotCountArgs} args - Arguments to filter ParkingSpots to count.
     * @example
     * // Count the number of ParkingSpots
     * const count = await prisma.parkingSpot.count({
     *   where: {
     *     // ... the filter for the ParkingSpots we want to count
     *   }
     * })
    **/
    count<T extends ParkingSpotCountArgs>(
      args?: Subset<T, ParkingSpotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkingSpotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParkingSpot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkingSpotAggregateArgs>(args: Subset<T, ParkingSpotAggregateArgs>): Prisma.PrismaPromise<GetParkingSpotAggregateType<T>>

    /**
     * Group by ParkingSpot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingSpotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkingSpotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkingSpotGroupByArgs['orderBy'] }
        : { orderBy?: ParkingSpotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkingSpotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkingSpotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParkingSpot model
   */
  readonly fields: ParkingSpotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParkingSpot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParkingSpotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    lot<T extends ParkingLotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingLotDefaultArgs<ExtArgs>>): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    reservations<T extends ParkingSpot$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingSpot$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    subleaseAgreements<T extends ParkingSpot$subleaseAgreementsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingSpot$subleaseAgreementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findMany'> | Null>;

    availabilities<T extends ParkingSpot$availabilitiesArgs<ExtArgs> = {}>(args?: Subset<T, ParkingSpot$availabilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ParkingSpot model
   */ 
  interface ParkingSpotFieldRefs {
    readonly spot_id: FieldRef<"ParkingSpot", 'Int'>
    readonly lot_id: FieldRef<"ParkingSpot", 'Int'>
    readonly spot_number: FieldRef<"ParkingSpot", 'Int'>
    readonly reservable: FieldRef<"ParkingSpot", 'Boolean'>
    readonly description: FieldRef<"ParkingSpot", 'String'>
    readonly price: FieldRef<"ParkingSpot", 'Float'>
    readonly is_reserved: FieldRef<"ParkingSpot", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ParkingSpot findUnique
   */
  export type ParkingSpotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingSpot to fetch.
     */
    where: ParkingSpotWhereUniqueInput
  }


  /**
   * ParkingSpot findUniqueOrThrow
   */
  export type ParkingSpotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingSpot to fetch.
     */
    where: ParkingSpotWhereUniqueInput
  }


  /**
   * ParkingSpot findFirst
   */
  export type ParkingSpotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingSpot to fetch.
     */
    where?: ParkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingSpots to fetch.
     */
    orderBy?: ParkingSpotOrderByWithRelationInput | ParkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingSpots.
     */
    cursor?: ParkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingSpots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingSpots.
     */
    distinct?: ParkingSpotScalarFieldEnum | ParkingSpotScalarFieldEnum[]
  }


  /**
   * ParkingSpot findFirstOrThrow
   */
  export type ParkingSpotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingSpot to fetch.
     */
    where?: ParkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingSpots to fetch.
     */
    orderBy?: ParkingSpotOrderByWithRelationInput | ParkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingSpots.
     */
    cursor?: ParkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingSpots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingSpots.
     */
    distinct?: ParkingSpotScalarFieldEnum | ParkingSpotScalarFieldEnum[]
  }


  /**
   * ParkingSpot findMany
   */
  export type ParkingSpotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingSpots to fetch.
     */
    where?: ParkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingSpots to fetch.
     */
    orderBy?: ParkingSpotOrderByWithRelationInput | ParkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParkingSpots.
     */
    cursor?: ParkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingSpots.
     */
    skip?: number
    distinct?: ParkingSpotScalarFieldEnum | ParkingSpotScalarFieldEnum[]
  }


  /**
   * ParkingSpot create
   */
  export type ParkingSpotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * The data needed to create a ParkingSpot.
     */
    data: XOR<ParkingSpotCreateInput, ParkingSpotUncheckedCreateInput>
  }


  /**
   * ParkingSpot createMany
   */
  export type ParkingSpotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParkingSpots.
     */
    data: ParkingSpotCreateManyInput | ParkingSpotCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ParkingSpot update
   */
  export type ParkingSpotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * The data needed to update a ParkingSpot.
     */
    data: XOR<ParkingSpotUpdateInput, ParkingSpotUncheckedUpdateInput>
    /**
     * Choose, which ParkingSpot to update.
     */
    where: ParkingSpotWhereUniqueInput
  }


  /**
   * ParkingSpot updateMany
   */
  export type ParkingSpotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParkingSpots.
     */
    data: XOR<ParkingSpotUpdateManyMutationInput, ParkingSpotUncheckedUpdateManyInput>
    /**
     * Filter which ParkingSpots to update
     */
    where?: ParkingSpotWhereInput
  }


  /**
   * ParkingSpot upsert
   */
  export type ParkingSpotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * The filter to search for the ParkingSpot to update in case it exists.
     */
    where: ParkingSpotWhereUniqueInput
    /**
     * In case the ParkingSpot found by the `where` argument doesn't exist, create a new ParkingSpot with this data.
     */
    create: XOR<ParkingSpotCreateInput, ParkingSpotUncheckedCreateInput>
    /**
     * In case the ParkingSpot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParkingSpotUpdateInput, ParkingSpotUncheckedUpdateInput>
  }


  /**
   * ParkingSpot delete
   */
  export type ParkingSpotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
    /**
     * Filter which ParkingSpot to delete.
     */
    where: ParkingSpotWhereUniqueInput
  }


  /**
   * ParkingSpot deleteMany
   */
  export type ParkingSpotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingSpots to delete
     */
    where?: ParkingSpotWhereInput
  }


  /**
   * ParkingSpot.reservations
   */
  export type ParkingSpot$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * ParkingSpot.subleaseAgreements
   */
  export type ParkingSpot$subleaseAgreementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    where?: SubleaseAgreementWhereInput
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    cursor?: SubleaseAgreementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubleaseAgreementScalarFieldEnum | SubleaseAgreementScalarFieldEnum[]
  }


  /**
   * ParkingSpot.availabilities
   */
  export type ParkingSpot$availabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    where?: SpotAvailabilityWhereInput
    orderBy?: SpotAvailabilityOrderByWithRelationInput | SpotAvailabilityOrderByWithRelationInput[]
    cursor?: SpotAvailabilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SpotAvailabilityScalarFieldEnum | SpotAvailabilityScalarFieldEnum[]
  }


  /**
   * ParkingSpot without action
   */
  export type ParkingSpotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingSpot
     */
    select?: ParkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingSpotInclude<ExtArgs> | null
  }



  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationAvgAggregateOutputType = {
    reservation_id: number | null
    spot_id: number | null
    user_id: number | null
    availability_id: number | null
  }

  export type ReservationSumAggregateOutputType = {
    reservation_id: number | null
    spot_id: number | null
    user_id: number | null
    availability_id: number | null
  }

  export type ReservationMinAggregateOutputType = {
    reservation_id: number | null
    spot_id: number | null
    user_id: number | null
    start_time: Date | null
    end_time: Date | null
    status: $Enums.ReservationStatus | null
    availability_id: number | null
  }

  export type ReservationMaxAggregateOutputType = {
    reservation_id: number | null
    spot_id: number | null
    user_id: number | null
    start_time: Date | null
    end_time: Date | null
    status: $Enums.ReservationStatus | null
    availability_id: number | null
  }

  export type ReservationCountAggregateOutputType = {
    reservation_id: number
    spot_id: number
    user_id: number
    start_time: number
    end_time: number
    status: number
    availability_id: number
    _all: number
  }


  export type ReservationAvgAggregateInputType = {
    reservation_id?: true
    spot_id?: true
    user_id?: true
    availability_id?: true
  }

  export type ReservationSumAggregateInputType = {
    reservation_id?: true
    spot_id?: true
    user_id?: true
    availability_id?: true
  }

  export type ReservationMinAggregateInputType = {
    reservation_id?: true
    spot_id?: true
    user_id?: true
    start_time?: true
    end_time?: true
    status?: true
    availability_id?: true
  }

  export type ReservationMaxAggregateInputType = {
    reservation_id?: true
    spot_id?: true
    user_id?: true
    start_time?: true
    end_time?: true
    status?: true
    availability_id?: true
  }

  export type ReservationCountAggregateInputType = {
    reservation_id?: true
    spot_id?: true
    user_id?: true
    start_time?: true
    end_time?: true
    status?: true
    availability_id?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _avg?: ReservationAvgAggregateInputType
    _sum?: ReservationSumAggregateInputType
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    reservation_id: number
    spot_id: number
    user_id: number
    start_time: Date
    end_time: Date
    status: $Enums.ReservationStatus
    availability_id: number | null
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reservation_id?: boolean
    spot_id?: boolean
    user_id?: boolean
    start_time?: boolean
    end_time?: boolean
    status?: boolean
    availability_id?: boolean
    parkingSpot?: boolean | ParkingSpotDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    spotAvailability?: boolean | Reservation$spotAvailabilityArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectScalar = {
    reservation_id?: boolean
    spot_id?: boolean
    user_id?: boolean
    start_time?: boolean
    end_time?: boolean
    status?: boolean
    availability_id?: boolean
  }

  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingSpot?: boolean | ParkingSpotDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    spotAvailability?: boolean | Reservation$spotAvailabilityArgs<ExtArgs>
  }


  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      parkingSpot: Prisma.$ParkingSpotPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      spotAvailability: Prisma.$SpotAvailabilityPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      reservation_id: number
      spot_id: number
      user_id: number
      start_time: Date
      end_time: Date
      status: $Enums.ReservationStatus
      availability_id: number | null
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }


  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReservationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reservation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReservationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `reservation_id`
     * const reservationWithReservation_idOnly = await prisma.reservation.findMany({ select: { reservation_id: true } })
     * 
    **/
    findMany<T extends ReservationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
    **/
    create<T extends ReservationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reservations.
     *     @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     *     @example
     *     // Create many Reservations
     *     const reservation = await prisma.reservation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReservationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
    **/
    delete<T extends ReservationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReservationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReservationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReservationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
    **/
    upsert<T extends ReservationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>
    ): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parkingSpot<T extends ParkingSpotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingSpotDefaultArgs<ExtArgs>>): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    spotAvailability<T extends Reservation$spotAvailabilityArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$spotAvailabilityArgs<ExtArgs>>): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reservation model
   */ 
  interface ReservationFieldRefs {
    readonly reservation_id: FieldRef<"Reservation", 'Int'>
    readonly spot_id: FieldRef<"Reservation", 'Int'>
    readonly user_id: FieldRef<"Reservation", 'Int'>
    readonly start_time: FieldRef<"Reservation", 'DateTime'>
    readonly end_time: FieldRef<"Reservation", 'DateTime'>
    readonly status: FieldRef<"Reservation", 'ReservationStatus'>
    readonly availability_id: FieldRef<"Reservation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }


  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }


  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }


  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
  }


  /**
   * Reservation.spotAvailability
   */
  export type Reservation$spotAvailabilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    where?: SpotAvailabilityWhereInput
  }


  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
  }



  /**
   * Model SpotAvailability
   */

  export type AggregateSpotAvailability = {
    _count: SpotAvailabilityCountAggregateOutputType | null
    _avg: SpotAvailabilityAvgAggregateOutputType | null
    _sum: SpotAvailabilitySumAggregateOutputType | null
    _min: SpotAvailabilityMinAggregateOutputType | null
    _max: SpotAvailabilityMaxAggregateOutputType | null
  }

  export type SpotAvailabilityAvgAggregateOutputType = {
    availability_id: number | null
    spot_id: number | null
  }

  export type SpotAvailabilitySumAggregateOutputType = {
    availability_id: number | null
    spot_id: number | null
  }

  export type SpotAvailabilityMinAggregateOutputType = {
    availability_id: number | null
    spot_id: number | null
    start_time: Date | null
    end_time: Date | null
    status: $Enums.AvailabilityStatus | null
  }

  export type SpotAvailabilityMaxAggregateOutputType = {
    availability_id: number | null
    spot_id: number | null
    start_time: Date | null
    end_time: Date | null
    status: $Enums.AvailabilityStatus | null
  }

  export type SpotAvailabilityCountAggregateOutputType = {
    availability_id: number
    spot_id: number
    start_time: number
    end_time: number
    status: number
    _all: number
  }


  export type SpotAvailabilityAvgAggregateInputType = {
    availability_id?: true
    spot_id?: true
  }

  export type SpotAvailabilitySumAggregateInputType = {
    availability_id?: true
    spot_id?: true
  }

  export type SpotAvailabilityMinAggregateInputType = {
    availability_id?: true
    spot_id?: true
    start_time?: true
    end_time?: true
    status?: true
  }

  export type SpotAvailabilityMaxAggregateInputType = {
    availability_id?: true
    spot_id?: true
    start_time?: true
    end_time?: true
    status?: true
  }

  export type SpotAvailabilityCountAggregateInputType = {
    availability_id?: true
    spot_id?: true
    start_time?: true
    end_time?: true
    status?: true
    _all?: true
  }

  export type SpotAvailabilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpotAvailability to aggregate.
     */
    where?: SpotAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotAvailabilities to fetch.
     */
    orderBy?: SpotAvailabilityOrderByWithRelationInput | SpotAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpotAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SpotAvailabilities
    **/
    _count?: true | SpotAvailabilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SpotAvailabilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SpotAvailabilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpotAvailabilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpotAvailabilityMaxAggregateInputType
  }

  export type GetSpotAvailabilityAggregateType<T extends SpotAvailabilityAggregateArgs> = {
        [P in keyof T & keyof AggregateSpotAvailability]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpotAvailability[P]>
      : GetScalarType<T[P], AggregateSpotAvailability[P]>
  }




  export type SpotAvailabilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SpotAvailabilityWhereInput
    orderBy?: SpotAvailabilityOrderByWithAggregationInput | SpotAvailabilityOrderByWithAggregationInput[]
    by: SpotAvailabilityScalarFieldEnum[] | SpotAvailabilityScalarFieldEnum
    having?: SpotAvailabilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpotAvailabilityCountAggregateInputType | true
    _avg?: SpotAvailabilityAvgAggregateInputType
    _sum?: SpotAvailabilitySumAggregateInputType
    _min?: SpotAvailabilityMinAggregateInputType
    _max?: SpotAvailabilityMaxAggregateInputType
  }

  export type SpotAvailabilityGroupByOutputType = {
    availability_id: number
    spot_id: number
    start_time: Date
    end_time: Date
    status: $Enums.AvailabilityStatus
    _count: SpotAvailabilityCountAggregateOutputType | null
    _avg: SpotAvailabilityAvgAggregateOutputType | null
    _sum: SpotAvailabilitySumAggregateOutputType | null
    _min: SpotAvailabilityMinAggregateOutputType | null
    _max: SpotAvailabilityMaxAggregateOutputType | null
  }

  type GetSpotAvailabilityGroupByPayload<T extends SpotAvailabilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpotAvailabilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpotAvailabilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpotAvailabilityGroupByOutputType[P]>
            : GetScalarType<T[P], SpotAvailabilityGroupByOutputType[P]>
        }
      >
    >


  export type SpotAvailabilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    availability_id?: boolean
    spot_id?: boolean
    start_time?: boolean
    end_time?: boolean
    status?: boolean
    parkingSpot?: boolean | ParkingSpotDefaultArgs<ExtArgs>
    reservations?: boolean | SpotAvailability$reservationsArgs<ExtArgs>
    _count?: boolean | SpotAvailabilityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["spotAvailability"]>

  export type SpotAvailabilitySelectScalar = {
    availability_id?: boolean
    spot_id?: boolean
    start_time?: boolean
    end_time?: boolean
    status?: boolean
  }

  export type SpotAvailabilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingSpot?: boolean | ParkingSpotDefaultArgs<ExtArgs>
    reservations?: boolean | SpotAvailability$reservationsArgs<ExtArgs>
    _count?: boolean | SpotAvailabilityCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SpotAvailabilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SpotAvailability"
    objects: {
      parkingSpot: Prisma.$ParkingSpotPayload<ExtArgs>
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      availability_id: number
      spot_id: number
      start_time: Date
      end_time: Date
      status: $Enums.AvailabilityStatus
    }, ExtArgs["result"]["spotAvailability"]>
    composites: {}
  }


  type SpotAvailabilityGetPayload<S extends boolean | null | undefined | SpotAvailabilityDefaultArgs> = $Result.GetResult<Prisma.$SpotAvailabilityPayload, S>

  type SpotAvailabilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SpotAvailabilityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SpotAvailabilityCountAggregateInputType | true
    }

  export interface SpotAvailabilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SpotAvailability'], meta: { name: 'SpotAvailability' } }
    /**
     * Find zero or one SpotAvailability that matches the filter.
     * @param {SpotAvailabilityFindUniqueArgs} args - Arguments to find a SpotAvailability
     * @example
     * // Get one SpotAvailability
     * const spotAvailability = await prisma.spotAvailability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpotAvailabilityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SpotAvailabilityFindUniqueArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SpotAvailability that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SpotAvailabilityFindUniqueOrThrowArgs} args - Arguments to find a SpotAvailability
     * @example
     * // Get one SpotAvailability
     * const spotAvailability = await prisma.spotAvailability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpotAvailabilityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpotAvailabilityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SpotAvailability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityFindFirstArgs} args - Arguments to find a SpotAvailability
     * @example
     * // Get one SpotAvailability
     * const spotAvailability = await prisma.spotAvailability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpotAvailabilityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SpotAvailabilityFindFirstArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SpotAvailability that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityFindFirstOrThrowArgs} args - Arguments to find a SpotAvailability
     * @example
     * // Get one SpotAvailability
     * const spotAvailability = await prisma.spotAvailability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpotAvailabilityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpotAvailabilityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SpotAvailabilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SpotAvailabilities
     * const spotAvailabilities = await prisma.spotAvailability.findMany()
     * 
     * // Get first 10 SpotAvailabilities
     * const spotAvailabilities = await prisma.spotAvailability.findMany({ take: 10 })
     * 
     * // Only select the `availability_id`
     * const spotAvailabilityWithAvailability_idOnly = await prisma.spotAvailability.findMany({ select: { availability_id: true } })
     * 
    **/
    findMany<T extends SpotAvailabilityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpotAvailabilityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SpotAvailability.
     * @param {SpotAvailabilityCreateArgs} args - Arguments to create a SpotAvailability.
     * @example
     * // Create one SpotAvailability
     * const SpotAvailability = await prisma.spotAvailability.create({
     *   data: {
     *     // ... data to create a SpotAvailability
     *   }
     * })
     * 
    **/
    create<T extends SpotAvailabilityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SpotAvailabilityCreateArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SpotAvailabilities.
     *     @param {SpotAvailabilityCreateManyArgs} args - Arguments to create many SpotAvailabilities.
     *     @example
     *     // Create many SpotAvailabilities
     *     const spotAvailability = await prisma.spotAvailability.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpotAvailabilityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpotAvailabilityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SpotAvailability.
     * @param {SpotAvailabilityDeleteArgs} args - Arguments to delete one SpotAvailability.
     * @example
     * // Delete one SpotAvailability
     * const SpotAvailability = await prisma.spotAvailability.delete({
     *   where: {
     *     // ... filter to delete one SpotAvailability
     *   }
     * })
     * 
    **/
    delete<T extends SpotAvailabilityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SpotAvailabilityDeleteArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SpotAvailability.
     * @param {SpotAvailabilityUpdateArgs} args - Arguments to update one SpotAvailability.
     * @example
     * // Update one SpotAvailability
     * const spotAvailability = await prisma.spotAvailability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpotAvailabilityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SpotAvailabilityUpdateArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SpotAvailabilities.
     * @param {SpotAvailabilityDeleteManyArgs} args - Arguments to filter SpotAvailabilities to delete.
     * @example
     * // Delete a few SpotAvailabilities
     * const { count } = await prisma.spotAvailability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpotAvailabilityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpotAvailabilityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SpotAvailabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SpotAvailabilities
     * const spotAvailability = await prisma.spotAvailability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpotAvailabilityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SpotAvailabilityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SpotAvailability.
     * @param {SpotAvailabilityUpsertArgs} args - Arguments to update or create a SpotAvailability.
     * @example
     * // Update or create a SpotAvailability
     * const spotAvailability = await prisma.spotAvailability.upsert({
     *   create: {
     *     // ... data to create a SpotAvailability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SpotAvailability we want to update
     *   }
     * })
    **/
    upsert<T extends SpotAvailabilityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SpotAvailabilityUpsertArgs<ExtArgs>>
    ): Prisma__SpotAvailabilityClient<$Result.GetResult<Prisma.$SpotAvailabilityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SpotAvailabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityCountArgs} args - Arguments to filter SpotAvailabilities to count.
     * @example
     * // Count the number of SpotAvailabilities
     * const count = await prisma.spotAvailability.count({
     *   where: {
     *     // ... the filter for the SpotAvailabilities we want to count
     *   }
     * })
    **/
    count<T extends SpotAvailabilityCountArgs>(
      args?: Subset<T, SpotAvailabilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpotAvailabilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SpotAvailability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpotAvailabilityAggregateArgs>(args: Subset<T, SpotAvailabilityAggregateArgs>): Prisma.PrismaPromise<GetSpotAvailabilityAggregateType<T>>

    /**
     * Group by SpotAvailability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpotAvailabilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpotAvailabilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpotAvailabilityGroupByArgs['orderBy'] }
        : { orderBy?: SpotAvailabilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpotAvailabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpotAvailabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SpotAvailability model
   */
  readonly fields: SpotAvailabilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SpotAvailability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpotAvailabilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parkingSpot<T extends ParkingSpotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingSpotDefaultArgs<ExtArgs>>): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    reservations<T extends SpotAvailability$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, SpotAvailability$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SpotAvailability model
   */ 
  interface SpotAvailabilityFieldRefs {
    readonly availability_id: FieldRef<"SpotAvailability", 'Int'>
    readonly spot_id: FieldRef<"SpotAvailability", 'Int'>
    readonly start_time: FieldRef<"SpotAvailability", 'DateTime'>
    readonly end_time: FieldRef<"SpotAvailability", 'DateTime'>
    readonly status: FieldRef<"SpotAvailability", 'AvailabilityStatus'>
  }
    

  // Custom InputTypes

  /**
   * SpotAvailability findUnique
   */
  export type SpotAvailabilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which SpotAvailability to fetch.
     */
    where: SpotAvailabilityWhereUniqueInput
  }


  /**
   * SpotAvailability findUniqueOrThrow
   */
  export type SpotAvailabilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which SpotAvailability to fetch.
     */
    where: SpotAvailabilityWhereUniqueInput
  }


  /**
   * SpotAvailability findFirst
   */
  export type SpotAvailabilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which SpotAvailability to fetch.
     */
    where?: SpotAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotAvailabilities to fetch.
     */
    orderBy?: SpotAvailabilityOrderByWithRelationInput | SpotAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpotAvailabilities.
     */
    cursor?: SpotAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpotAvailabilities.
     */
    distinct?: SpotAvailabilityScalarFieldEnum | SpotAvailabilityScalarFieldEnum[]
  }


  /**
   * SpotAvailability findFirstOrThrow
   */
  export type SpotAvailabilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which SpotAvailability to fetch.
     */
    where?: SpotAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotAvailabilities to fetch.
     */
    orderBy?: SpotAvailabilityOrderByWithRelationInput | SpotAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SpotAvailabilities.
     */
    cursor?: SpotAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SpotAvailabilities.
     */
    distinct?: SpotAvailabilityScalarFieldEnum | SpotAvailabilityScalarFieldEnum[]
  }


  /**
   * SpotAvailability findMany
   */
  export type SpotAvailabilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which SpotAvailabilities to fetch.
     */
    where?: SpotAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SpotAvailabilities to fetch.
     */
    orderBy?: SpotAvailabilityOrderByWithRelationInput | SpotAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SpotAvailabilities.
     */
    cursor?: SpotAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SpotAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SpotAvailabilities.
     */
    skip?: number
    distinct?: SpotAvailabilityScalarFieldEnum | SpotAvailabilityScalarFieldEnum[]
  }


  /**
   * SpotAvailability create
   */
  export type SpotAvailabilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to create a SpotAvailability.
     */
    data: XOR<SpotAvailabilityCreateInput, SpotAvailabilityUncheckedCreateInput>
  }


  /**
   * SpotAvailability createMany
   */
  export type SpotAvailabilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SpotAvailabilities.
     */
    data: SpotAvailabilityCreateManyInput | SpotAvailabilityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SpotAvailability update
   */
  export type SpotAvailabilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to update a SpotAvailability.
     */
    data: XOR<SpotAvailabilityUpdateInput, SpotAvailabilityUncheckedUpdateInput>
    /**
     * Choose, which SpotAvailability to update.
     */
    where: SpotAvailabilityWhereUniqueInput
  }


  /**
   * SpotAvailability updateMany
   */
  export type SpotAvailabilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SpotAvailabilities.
     */
    data: XOR<SpotAvailabilityUpdateManyMutationInput, SpotAvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which SpotAvailabilities to update
     */
    where?: SpotAvailabilityWhereInput
  }


  /**
   * SpotAvailability upsert
   */
  export type SpotAvailabilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * The filter to search for the SpotAvailability to update in case it exists.
     */
    where: SpotAvailabilityWhereUniqueInput
    /**
     * In case the SpotAvailability found by the `where` argument doesn't exist, create a new SpotAvailability with this data.
     */
    create: XOR<SpotAvailabilityCreateInput, SpotAvailabilityUncheckedCreateInput>
    /**
     * In case the SpotAvailability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpotAvailabilityUpdateInput, SpotAvailabilityUncheckedUpdateInput>
  }


  /**
   * SpotAvailability delete
   */
  export type SpotAvailabilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
    /**
     * Filter which SpotAvailability to delete.
     */
    where: SpotAvailabilityWhereUniqueInput
  }


  /**
   * SpotAvailability deleteMany
   */
  export type SpotAvailabilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SpotAvailabilities to delete
     */
    where?: SpotAvailabilityWhereInput
  }


  /**
   * SpotAvailability.reservations
   */
  export type SpotAvailability$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }


  /**
   * SpotAvailability without action
   */
  export type SpotAvailabilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SpotAvailability
     */
    select?: SpotAvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SpotAvailabilityInclude<ExtArgs> | null
  }



  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    review_id: number | null
    lot_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    review_id: number | null
    lot_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    review_id: number | null
    lot_id: number | null
    user_id: number | null
    rating: number | null
    comment: string | null
    created_at: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    review_id: number | null
    lot_id: number | null
    user_id: number | null
    rating: number | null
    comment: string | null
    created_at: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    review_id: number
    lot_id: number
    user_id: number
    rating: number
    comment: number
    created_at: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    review_id?: true
    lot_id?: true
    user_id?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    review_id?: true
    lot_id?: true
    user_id?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    review_id?: true
    lot_id?: true
    user_id?: true
    rating?: true
    comment?: true
    created_at?: true
  }

  export type ReviewMaxAggregateInputType = {
    review_id?: true
    lot_id?: true
    user_id?: true
    rating?: true
    comment?: true
    created_at?: true
  }

  export type ReviewCountAggregateInputType = {
    review_id?: true
    lot_id?: true
    user_id?: true
    rating?: true
    comment?: true
    created_at?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    review_id: number
    lot_id: number
    user_id: number
    rating: number
    comment: string | null
    created_at: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    review_id?: boolean
    lot_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    created_at?: boolean
    parkingLot?: boolean | ParkingLotDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    review_id?: boolean
    lot_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    created_at?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingLot?: boolean | ParkingLotDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      parkingLot: Prisma.$ParkingLotPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      review_id: number
      lot_id: number
      user_id: number
      rating: number
      comment: string | null
      created_at: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }


  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `review_id`
     * const reviewWithReview_idOnly = await prisma.review.findMany({ select: { review_id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>
    ): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parkingLot<T extends ParkingLotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingLotDefaultArgs<ExtArgs>>): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly review_id: FieldRef<"Review", 'Int'>
    readonly lot_id: FieldRef<"Review", 'Int'>
    readonly user_id: FieldRef<"Review", 'Int'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly comment: FieldRef<"Review", 'String'>
    readonly created_at: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    message_id: number | null
    sender_id: number | null
    receiver_id: number | null
  }

  export type MessageSumAggregateOutputType = {
    message_id: number | null
    sender_id: number | null
    receiver_id: number | null
  }

  export type MessageMinAggregateOutputType = {
    message_id: number | null
    sender_id: number | null
    receiver_id: number | null
    message_text: string | null
    created_at: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    message_id: number | null
    sender_id: number | null
    receiver_id: number | null
    message_text: string | null
    created_at: Date | null
  }

  export type MessageCountAggregateOutputType = {
    message_id: number
    sender_id: number
    receiver_id: number
    message_text: number
    created_at: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    message_id?: true
    sender_id?: true
    receiver_id?: true
  }

  export type MessageSumAggregateInputType = {
    message_id?: true
    sender_id?: true
    receiver_id?: true
  }

  export type MessageMinAggregateInputType = {
    message_id?: true
    sender_id?: true
    receiver_id?: true
    message_text?: true
    created_at?: true
  }

  export type MessageMaxAggregateInputType = {
    message_id?: true
    sender_id?: true
    receiver_id?: true
    message_text?: true
    created_at?: true
  }

  export type MessageCountAggregateInputType = {
    message_id?: true
    sender_id?: true
    receiver_id?: true
    message_text?: true
    created_at?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    message_id: number
    sender_id: number
    receiver_id: number
    message_text: string
    created_at: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    message_id?: boolean
    sender_id?: boolean
    receiver_id?: boolean
    message_text?: boolean
    created_at?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    message_id?: boolean
    sender_id?: boolean
    receiver_id?: boolean
    message_text?: boolean
    created_at?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      message_id: number
      sender_id: number
      receiver_id: number
      message_text: string
      created_at: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `message_id`
     * const messageWithMessage_idOnly = await prisma.message.findMany({ select: { message_id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly message_id: FieldRef<"Message", 'Int'>
    readonly sender_id: FieldRef<"Message", 'Int'>
    readonly receiver_id: FieldRef<"Message", 'Int'>
    readonly message_text: FieldRef<"Message", 'String'>
    readonly created_at: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model SubleaseAgreement
   */

  export type AggregateSubleaseAgreement = {
    _count: SubleaseAgreementCountAggregateOutputType | null
    _avg: SubleaseAgreementAvgAggregateOutputType | null
    _sum: SubleaseAgreementSumAggregateOutputType | null
    _min: SubleaseAgreementMinAggregateOutputType | null
    _max: SubleaseAgreementMaxAggregateOutputType | null
  }

  export type SubleaseAgreementAvgAggregateOutputType = {
    agreement_id: number | null
    original_leaser_id: number | null
    subleaser_id: number | null
    spot_id: number | null
  }

  export type SubleaseAgreementSumAggregateOutputType = {
    agreement_id: number | null
    original_leaser_id: number | null
    subleaser_id: number | null
    spot_id: number | null
  }

  export type SubleaseAgreementMinAggregateOutputType = {
    agreement_id: number | null
    original_leaser_id: number | null
    subleaser_id: number | null
    spot_id: number | null
    start_date: Date | null
    end_date: Date | null
    status: $Enums.AgreementStatus | null
  }

  export type SubleaseAgreementMaxAggregateOutputType = {
    agreement_id: number | null
    original_leaser_id: number | null
    subleaser_id: number | null
    spot_id: number | null
    start_date: Date | null
    end_date: Date | null
    status: $Enums.AgreementStatus | null
  }

  export type SubleaseAgreementCountAggregateOutputType = {
    agreement_id: number
    original_leaser_id: number
    subleaser_id: number
    spot_id: number
    start_date: number
    end_date: number
    status: number
    _all: number
  }


  export type SubleaseAgreementAvgAggregateInputType = {
    agreement_id?: true
    original_leaser_id?: true
    subleaser_id?: true
    spot_id?: true
  }

  export type SubleaseAgreementSumAggregateInputType = {
    agreement_id?: true
    original_leaser_id?: true
    subleaser_id?: true
    spot_id?: true
  }

  export type SubleaseAgreementMinAggregateInputType = {
    agreement_id?: true
    original_leaser_id?: true
    subleaser_id?: true
    spot_id?: true
    start_date?: true
    end_date?: true
    status?: true
  }

  export type SubleaseAgreementMaxAggregateInputType = {
    agreement_id?: true
    original_leaser_id?: true
    subleaser_id?: true
    spot_id?: true
    start_date?: true
    end_date?: true
    status?: true
  }

  export type SubleaseAgreementCountAggregateInputType = {
    agreement_id?: true
    original_leaser_id?: true
    subleaser_id?: true
    spot_id?: true
    start_date?: true
    end_date?: true
    status?: true
    _all?: true
  }

  export type SubleaseAgreementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubleaseAgreement to aggregate.
     */
    where?: SubleaseAgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubleaseAgreements to fetch.
     */
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubleaseAgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubleaseAgreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubleaseAgreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubleaseAgreements
    **/
    _count?: true | SubleaseAgreementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubleaseAgreementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubleaseAgreementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubleaseAgreementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubleaseAgreementMaxAggregateInputType
  }

  export type GetSubleaseAgreementAggregateType<T extends SubleaseAgreementAggregateArgs> = {
        [P in keyof T & keyof AggregateSubleaseAgreement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubleaseAgreement[P]>
      : GetScalarType<T[P], AggregateSubleaseAgreement[P]>
  }




  export type SubleaseAgreementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubleaseAgreementWhereInput
    orderBy?: SubleaseAgreementOrderByWithAggregationInput | SubleaseAgreementOrderByWithAggregationInput[]
    by: SubleaseAgreementScalarFieldEnum[] | SubleaseAgreementScalarFieldEnum
    having?: SubleaseAgreementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubleaseAgreementCountAggregateInputType | true
    _avg?: SubleaseAgreementAvgAggregateInputType
    _sum?: SubleaseAgreementSumAggregateInputType
    _min?: SubleaseAgreementMinAggregateInputType
    _max?: SubleaseAgreementMaxAggregateInputType
  }

  export type SubleaseAgreementGroupByOutputType = {
    agreement_id: number
    original_leaser_id: number
    subleaser_id: number
    spot_id: number
    start_date: Date
    end_date: Date
    status: $Enums.AgreementStatus
    _count: SubleaseAgreementCountAggregateOutputType | null
    _avg: SubleaseAgreementAvgAggregateOutputType | null
    _sum: SubleaseAgreementSumAggregateOutputType | null
    _min: SubleaseAgreementMinAggregateOutputType | null
    _max: SubleaseAgreementMaxAggregateOutputType | null
  }

  type GetSubleaseAgreementGroupByPayload<T extends SubleaseAgreementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubleaseAgreementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubleaseAgreementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubleaseAgreementGroupByOutputType[P]>
            : GetScalarType<T[P], SubleaseAgreementGroupByOutputType[P]>
        }
      >
    >


  export type SubleaseAgreementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    agreement_id?: boolean
    original_leaser_id?: boolean
    subleaser_id?: boolean
    spot_id?: boolean
    start_date?: boolean
    end_date?: boolean
    status?: boolean
    originalLeaser?: boolean | UserDefaultArgs<ExtArgs>
    subLeaser?: boolean | UserDefaultArgs<ExtArgs>
    parkingSpot?: boolean | ParkingSpotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subleaseAgreement"]>

  export type SubleaseAgreementSelectScalar = {
    agreement_id?: boolean
    original_leaser_id?: boolean
    subleaser_id?: boolean
    spot_id?: boolean
    start_date?: boolean
    end_date?: boolean
    status?: boolean
  }

  export type SubleaseAgreementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originalLeaser?: boolean | UserDefaultArgs<ExtArgs>
    subLeaser?: boolean | UserDefaultArgs<ExtArgs>
    parkingSpot?: boolean | ParkingSpotDefaultArgs<ExtArgs>
  }


  export type $SubleaseAgreementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubleaseAgreement"
    objects: {
      originalLeaser: Prisma.$UserPayload<ExtArgs>
      subLeaser: Prisma.$UserPayload<ExtArgs>
      parkingSpot: Prisma.$ParkingSpotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      agreement_id: number
      original_leaser_id: number
      subleaser_id: number
      spot_id: number
      start_date: Date
      end_date: Date
      status: $Enums.AgreementStatus
    }, ExtArgs["result"]["subleaseAgreement"]>
    composites: {}
  }


  type SubleaseAgreementGetPayload<S extends boolean | null | undefined | SubleaseAgreementDefaultArgs> = $Result.GetResult<Prisma.$SubleaseAgreementPayload, S>

  type SubleaseAgreementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubleaseAgreementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubleaseAgreementCountAggregateInputType | true
    }

  export interface SubleaseAgreementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubleaseAgreement'], meta: { name: 'SubleaseAgreement' } }
    /**
     * Find zero or one SubleaseAgreement that matches the filter.
     * @param {SubleaseAgreementFindUniqueArgs} args - Arguments to find a SubleaseAgreement
     * @example
     * // Get one SubleaseAgreement
     * const subleaseAgreement = await prisma.subleaseAgreement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubleaseAgreementFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubleaseAgreementFindUniqueArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SubleaseAgreement that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubleaseAgreementFindUniqueOrThrowArgs} args - Arguments to find a SubleaseAgreement
     * @example
     * // Get one SubleaseAgreement
     * const subleaseAgreement = await prisma.subleaseAgreement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubleaseAgreementFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubleaseAgreementFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SubleaseAgreement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementFindFirstArgs} args - Arguments to find a SubleaseAgreement
     * @example
     * // Get one SubleaseAgreement
     * const subleaseAgreement = await prisma.subleaseAgreement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubleaseAgreementFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubleaseAgreementFindFirstArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SubleaseAgreement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementFindFirstOrThrowArgs} args - Arguments to find a SubleaseAgreement
     * @example
     * // Get one SubleaseAgreement
     * const subleaseAgreement = await prisma.subleaseAgreement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubleaseAgreementFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubleaseAgreementFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SubleaseAgreements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubleaseAgreements
     * const subleaseAgreements = await prisma.subleaseAgreement.findMany()
     * 
     * // Get first 10 SubleaseAgreements
     * const subleaseAgreements = await prisma.subleaseAgreement.findMany({ take: 10 })
     * 
     * // Only select the `agreement_id`
     * const subleaseAgreementWithAgreement_idOnly = await prisma.subleaseAgreement.findMany({ select: { agreement_id: true } })
     * 
    **/
    findMany<T extends SubleaseAgreementFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubleaseAgreementFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SubleaseAgreement.
     * @param {SubleaseAgreementCreateArgs} args - Arguments to create a SubleaseAgreement.
     * @example
     * // Create one SubleaseAgreement
     * const SubleaseAgreement = await prisma.subleaseAgreement.create({
     *   data: {
     *     // ... data to create a SubleaseAgreement
     *   }
     * })
     * 
    **/
    create<T extends SubleaseAgreementCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubleaseAgreementCreateArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SubleaseAgreements.
     *     @param {SubleaseAgreementCreateManyArgs} args - Arguments to create many SubleaseAgreements.
     *     @example
     *     // Create many SubleaseAgreements
     *     const subleaseAgreement = await prisma.subleaseAgreement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubleaseAgreementCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubleaseAgreementCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubleaseAgreement.
     * @param {SubleaseAgreementDeleteArgs} args - Arguments to delete one SubleaseAgreement.
     * @example
     * // Delete one SubleaseAgreement
     * const SubleaseAgreement = await prisma.subleaseAgreement.delete({
     *   where: {
     *     // ... filter to delete one SubleaseAgreement
     *   }
     * })
     * 
    **/
    delete<T extends SubleaseAgreementDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubleaseAgreementDeleteArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SubleaseAgreement.
     * @param {SubleaseAgreementUpdateArgs} args - Arguments to update one SubleaseAgreement.
     * @example
     * // Update one SubleaseAgreement
     * const subleaseAgreement = await prisma.subleaseAgreement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubleaseAgreementUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubleaseAgreementUpdateArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SubleaseAgreements.
     * @param {SubleaseAgreementDeleteManyArgs} args - Arguments to filter SubleaseAgreements to delete.
     * @example
     * // Delete a few SubleaseAgreements
     * const { count } = await prisma.subleaseAgreement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubleaseAgreementDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubleaseAgreementDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubleaseAgreements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubleaseAgreements
     * const subleaseAgreement = await prisma.subleaseAgreement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubleaseAgreementUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubleaseAgreementUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubleaseAgreement.
     * @param {SubleaseAgreementUpsertArgs} args - Arguments to update or create a SubleaseAgreement.
     * @example
     * // Update or create a SubleaseAgreement
     * const subleaseAgreement = await prisma.subleaseAgreement.upsert({
     *   create: {
     *     // ... data to create a SubleaseAgreement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubleaseAgreement we want to update
     *   }
     * })
    **/
    upsert<T extends SubleaseAgreementUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubleaseAgreementUpsertArgs<ExtArgs>>
    ): Prisma__SubleaseAgreementClient<$Result.GetResult<Prisma.$SubleaseAgreementPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SubleaseAgreements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementCountArgs} args - Arguments to filter SubleaseAgreements to count.
     * @example
     * // Count the number of SubleaseAgreements
     * const count = await prisma.subleaseAgreement.count({
     *   where: {
     *     // ... the filter for the SubleaseAgreements we want to count
     *   }
     * })
    **/
    count<T extends SubleaseAgreementCountArgs>(
      args?: Subset<T, SubleaseAgreementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubleaseAgreementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubleaseAgreement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubleaseAgreementAggregateArgs>(args: Subset<T, SubleaseAgreementAggregateArgs>): Prisma.PrismaPromise<GetSubleaseAgreementAggregateType<T>>

    /**
     * Group by SubleaseAgreement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubleaseAgreementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubleaseAgreementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubleaseAgreementGroupByArgs['orderBy'] }
        : { orderBy?: SubleaseAgreementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubleaseAgreementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubleaseAgreementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubleaseAgreement model
   */
  readonly fields: SubleaseAgreementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubleaseAgreement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubleaseAgreementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    originalLeaser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    subLeaser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    parkingSpot<T extends ParkingSpotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingSpotDefaultArgs<ExtArgs>>): Prisma__ParkingSpotClient<$Result.GetResult<Prisma.$ParkingSpotPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SubleaseAgreement model
   */ 
  interface SubleaseAgreementFieldRefs {
    readonly agreement_id: FieldRef<"SubleaseAgreement", 'Int'>
    readonly original_leaser_id: FieldRef<"SubleaseAgreement", 'Int'>
    readonly subleaser_id: FieldRef<"SubleaseAgreement", 'Int'>
    readonly spot_id: FieldRef<"SubleaseAgreement", 'Int'>
    readonly start_date: FieldRef<"SubleaseAgreement", 'DateTime'>
    readonly end_date: FieldRef<"SubleaseAgreement", 'DateTime'>
    readonly status: FieldRef<"SubleaseAgreement", 'AgreementStatus'>
  }
    

  // Custom InputTypes

  /**
   * SubleaseAgreement findUnique
   */
  export type SubleaseAgreementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * Filter, which SubleaseAgreement to fetch.
     */
    where: SubleaseAgreementWhereUniqueInput
  }


  /**
   * SubleaseAgreement findUniqueOrThrow
   */
  export type SubleaseAgreementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * Filter, which SubleaseAgreement to fetch.
     */
    where: SubleaseAgreementWhereUniqueInput
  }


  /**
   * SubleaseAgreement findFirst
   */
  export type SubleaseAgreementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * Filter, which SubleaseAgreement to fetch.
     */
    where?: SubleaseAgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubleaseAgreements to fetch.
     */
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubleaseAgreements.
     */
    cursor?: SubleaseAgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubleaseAgreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubleaseAgreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubleaseAgreements.
     */
    distinct?: SubleaseAgreementScalarFieldEnum | SubleaseAgreementScalarFieldEnum[]
  }


  /**
   * SubleaseAgreement findFirstOrThrow
   */
  export type SubleaseAgreementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * Filter, which SubleaseAgreement to fetch.
     */
    where?: SubleaseAgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubleaseAgreements to fetch.
     */
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubleaseAgreements.
     */
    cursor?: SubleaseAgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubleaseAgreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubleaseAgreements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubleaseAgreements.
     */
    distinct?: SubleaseAgreementScalarFieldEnum | SubleaseAgreementScalarFieldEnum[]
  }


  /**
   * SubleaseAgreement findMany
   */
  export type SubleaseAgreementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * Filter, which SubleaseAgreements to fetch.
     */
    where?: SubleaseAgreementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubleaseAgreements to fetch.
     */
    orderBy?: SubleaseAgreementOrderByWithRelationInput | SubleaseAgreementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubleaseAgreements.
     */
    cursor?: SubleaseAgreementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubleaseAgreements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubleaseAgreements.
     */
    skip?: number
    distinct?: SubleaseAgreementScalarFieldEnum | SubleaseAgreementScalarFieldEnum[]
  }


  /**
   * SubleaseAgreement create
   */
  export type SubleaseAgreementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * The data needed to create a SubleaseAgreement.
     */
    data: XOR<SubleaseAgreementCreateInput, SubleaseAgreementUncheckedCreateInput>
  }


  /**
   * SubleaseAgreement createMany
   */
  export type SubleaseAgreementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubleaseAgreements.
     */
    data: SubleaseAgreementCreateManyInput | SubleaseAgreementCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SubleaseAgreement update
   */
  export type SubleaseAgreementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * The data needed to update a SubleaseAgreement.
     */
    data: XOR<SubleaseAgreementUpdateInput, SubleaseAgreementUncheckedUpdateInput>
    /**
     * Choose, which SubleaseAgreement to update.
     */
    where: SubleaseAgreementWhereUniqueInput
  }


  /**
   * SubleaseAgreement updateMany
   */
  export type SubleaseAgreementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubleaseAgreements.
     */
    data: XOR<SubleaseAgreementUpdateManyMutationInput, SubleaseAgreementUncheckedUpdateManyInput>
    /**
     * Filter which SubleaseAgreements to update
     */
    where?: SubleaseAgreementWhereInput
  }


  /**
   * SubleaseAgreement upsert
   */
  export type SubleaseAgreementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * The filter to search for the SubleaseAgreement to update in case it exists.
     */
    where: SubleaseAgreementWhereUniqueInput
    /**
     * In case the SubleaseAgreement found by the `where` argument doesn't exist, create a new SubleaseAgreement with this data.
     */
    create: XOR<SubleaseAgreementCreateInput, SubleaseAgreementUncheckedCreateInput>
    /**
     * In case the SubleaseAgreement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubleaseAgreementUpdateInput, SubleaseAgreementUncheckedUpdateInput>
  }


  /**
   * SubleaseAgreement delete
   */
  export type SubleaseAgreementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
    /**
     * Filter which SubleaseAgreement to delete.
     */
    where: SubleaseAgreementWhereUniqueInput
  }


  /**
   * SubleaseAgreement deleteMany
   */
  export type SubleaseAgreementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubleaseAgreements to delete
     */
    where?: SubleaseAgreementWhereInput
  }


  /**
   * SubleaseAgreement without action
   */
  export type SubleaseAgreementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubleaseAgreement
     */
    select?: SubleaseAgreementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubleaseAgreementInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    email: 'email',
    password_hash: 'password_hash',
    profile_picture: 'profile_picture',
    user_type: 'user_type'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ParkingLotScalarFieldEnum: {
    lot_id: 'lot_id',
    name: 'name',
    address: 'address',
    description: 'description',
    latitude: 'latitude',
    longitude: 'longitude',
    total_spots: 'total_spots',
    spot_numbering: 'spot_numbering',
    owner_id: 'owner_id'
  };

  export type ParkingLotScalarFieldEnum = (typeof ParkingLotScalarFieldEnum)[keyof typeof ParkingLotScalarFieldEnum]


  export const ParkingSpotScalarFieldEnum: {
    spot_id: 'spot_id',
    lot_id: 'lot_id',
    spot_number: 'spot_number',
    reservable: 'reservable',
    description: 'description',
    price: 'price',
    is_reserved: 'is_reserved'
  };

  export type ParkingSpotScalarFieldEnum = (typeof ParkingSpotScalarFieldEnum)[keyof typeof ParkingSpotScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    reservation_id: 'reservation_id',
    spot_id: 'spot_id',
    user_id: 'user_id',
    start_time: 'start_time',
    end_time: 'end_time',
    status: 'status',
    availability_id: 'availability_id'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const SpotAvailabilityScalarFieldEnum: {
    availability_id: 'availability_id',
    spot_id: 'spot_id',
    start_time: 'start_time',
    end_time: 'end_time',
    status: 'status'
  };

  export type SpotAvailabilityScalarFieldEnum = (typeof SpotAvailabilityScalarFieldEnum)[keyof typeof SpotAvailabilityScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    review_id: 'review_id',
    lot_id: 'lot_id',
    user_id: 'user_id',
    rating: 'rating',
    comment: 'comment',
    created_at: 'created_at'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    message_id: 'message_id',
    sender_id: 'sender_id',
    receiver_id: 'receiver_id',
    message_text: 'message_text',
    created_at: 'created_at'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SubleaseAgreementScalarFieldEnum: {
    agreement_id: 'agreement_id',
    original_leaser_id: 'original_leaser_id',
    subleaser_id: 'subleaser_id',
    spot_id: 'spot_id',
    start_date: 'start_date',
    end_date: 'end_date',
    status: 'status'
  };

  export type SubleaseAgreementScalarFieldEnum = (typeof SubleaseAgreementScalarFieldEnum)[keyof typeof SubleaseAgreementScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'UserType[]'
   */
  export type ListEnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ReservationStatus'
   */
  export type EnumReservationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationStatus'>
    


  /**
   * Reference to a field of type 'ReservationStatus[]'
   */
  export type ListEnumReservationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationStatus[]'>
    


  /**
   * Reference to a field of type 'AvailabilityStatus'
   */
  export type EnumAvailabilityStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AvailabilityStatus'>
    


  /**
   * Reference to a field of type 'AvailabilityStatus[]'
   */
  export type ListEnumAvailabilityStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AvailabilityStatus[]'>
    


  /**
   * Reference to a field of type 'AgreementStatus'
   */
  export type EnumAgreementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AgreementStatus'>
    


  /**
   * Reference to a field of type 'AgreementStatus[]'
   */
  export type ListEnumAgreementStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AgreementStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    profile_picture?: StringNullableFilter<"User"> | string | null
    user_type?: EnumUserTypeFilter<"User"> | $Enums.UserType
    ownedLots?: ParkingLotListRelationFilter
    reservations?: ReservationListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    originalLeases?: SubleaseAgreementListRelationFilter
    subLeases?: SubleaseAgreementListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrderInput | SortOrder
    user_type?: SortOrder
    ownedLots?: ParkingLotOrderByRelationAggregateInput
    reservations?: ReservationOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    receivedMessages?: MessageOrderByRelationAggregateInput
    originalLeases?: SubleaseAgreementOrderByRelationAggregateInput
    subLeases?: SubleaseAgreementOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password_hash?: StringFilter<"User"> | string
    profile_picture?: StringNullableFilter<"User"> | string | null
    user_type?: EnumUserTypeFilter<"User"> | $Enums.UserType
    ownedLots?: ParkingLotListRelationFilter
    reservations?: ReservationListRelationFilter
    sentMessages?: MessageListRelationFilter
    receivedMessages?: MessageListRelationFilter
    originalLeases?: SubleaseAgreementListRelationFilter
    subLeases?: SubleaseAgreementListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "user_id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrderInput | SortOrder
    user_type?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    profile_picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    user_type?: EnumUserTypeWithAggregatesFilter<"User"> | $Enums.UserType
  }

  export type ParkingLotWhereInput = {
    AND?: ParkingLotWhereInput | ParkingLotWhereInput[]
    OR?: ParkingLotWhereInput[]
    NOT?: ParkingLotWhereInput | ParkingLotWhereInput[]
    lot_id?: IntFilter<"ParkingLot"> | number
    name?: StringFilter<"ParkingLot"> | string
    address?: StringFilter<"ParkingLot"> | string
    description?: StringNullableFilter<"ParkingLot"> | string | null
    latitude?: FloatFilter<"ParkingLot"> | number
    longitude?: FloatFilter<"ParkingLot"> | number
    total_spots?: IntFilter<"ParkingLot"> | number
    spot_numbering?: BoolFilter<"ParkingLot"> | boolean
    owner_id?: IntFilter<"ParkingLot"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    parkingSpots?: ParkingSpotListRelationFilter
    reviews?: ReviewListRelationFilter
  }

  export type ParkingLotOrderByWithRelationInput = {
    lot_id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrderInput | SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    spot_numbering?: SortOrder
    owner_id?: SortOrder
    owner?: UserOrderByWithRelationInput
    parkingSpots?: ParkingSpotOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type ParkingLotWhereUniqueInput = Prisma.AtLeast<{
    lot_id?: number
    AND?: ParkingLotWhereInput | ParkingLotWhereInput[]
    OR?: ParkingLotWhereInput[]
    NOT?: ParkingLotWhereInput | ParkingLotWhereInput[]
    name?: StringFilter<"ParkingLot"> | string
    address?: StringFilter<"ParkingLot"> | string
    description?: StringNullableFilter<"ParkingLot"> | string | null
    latitude?: FloatFilter<"ParkingLot"> | number
    longitude?: FloatFilter<"ParkingLot"> | number
    total_spots?: IntFilter<"ParkingLot"> | number
    spot_numbering?: BoolFilter<"ParkingLot"> | boolean
    owner_id?: IntFilter<"ParkingLot"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    parkingSpots?: ParkingSpotListRelationFilter
    reviews?: ReviewListRelationFilter
  }, "lot_id">

  export type ParkingLotOrderByWithAggregationInput = {
    lot_id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrderInput | SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    spot_numbering?: SortOrder
    owner_id?: SortOrder
    _count?: ParkingLotCountOrderByAggregateInput
    _avg?: ParkingLotAvgOrderByAggregateInput
    _max?: ParkingLotMaxOrderByAggregateInput
    _min?: ParkingLotMinOrderByAggregateInput
    _sum?: ParkingLotSumOrderByAggregateInput
  }

  export type ParkingLotScalarWhereWithAggregatesInput = {
    AND?: ParkingLotScalarWhereWithAggregatesInput | ParkingLotScalarWhereWithAggregatesInput[]
    OR?: ParkingLotScalarWhereWithAggregatesInput[]
    NOT?: ParkingLotScalarWhereWithAggregatesInput | ParkingLotScalarWhereWithAggregatesInput[]
    lot_id?: IntWithAggregatesFilter<"ParkingLot"> | number
    name?: StringWithAggregatesFilter<"ParkingLot"> | string
    address?: StringWithAggregatesFilter<"ParkingLot"> | string
    description?: StringNullableWithAggregatesFilter<"ParkingLot"> | string | null
    latitude?: FloatWithAggregatesFilter<"ParkingLot"> | number
    longitude?: FloatWithAggregatesFilter<"ParkingLot"> | number
    total_spots?: IntWithAggregatesFilter<"ParkingLot"> | number
    spot_numbering?: BoolWithAggregatesFilter<"ParkingLot"> | boolean
    owner_id?: IntWithAggregatesFilter<"ParkingLot"> | number
  }

  export type ParkingSpotWhereInput = {
    AND?: ParkingSpotWhereInput | ParkingSpotWhereInput[]
    OR?: ParkingSpotWhereInput[]
    NOT?: ParkingSpotWhereInput | ParkingSpotWhereInput[]
    spot_id?: IntFilter<"ParkingSpot"> | number
    lot_id?: IntFilter<"ParkingSpot"> | number
    spot_number?: IntNullableFilter<"ParkingSpot"> | number | null
    reservable?: BoolFilter<"ParkingSpot"> | boolean
    description?: StringNullableFilter<"ParkingSpot"> | string | null
    price?: FloatFilter<"ParkingSpot"> | number
    is_reserved?: BoolFilter<"ParkingSpot"> | boolean
    lot?: XOR<ParkingLotRelationFilter, ParkingLotWhereInput>
    reservations?: ReservationListRelationFilter
    subleaseAgreements?: SubleaseAgreementListRelationFilter
    availabilities?: SpotAvailabilityListRelationFilter
  }

  export type ParkingSpotOrderByWithRelationInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrderInput | SortOrder
    reservable?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    is_reserved?: SortOrder
    lot?: ParkingLotOrderByWithRelationInput
    reservations?: ReservationOrderByRelationAggregateInput
    subleaseAgreements?: SubleaseAgreementOrderByRelationAggregateInput
    availabilities?: SpotAvailabilityOrderByRelationAggregateInput
  }

  export type ParkingSpotWhereUniqueInput = Prisma.AtLeast<{
    spot_id?: number
    AND?: ParkingSpotWhereInput | ParkingSpotWhereInput[]
    OR?: ParkingSpotWhereInput[]
    NOT?: ParkingSpotWhereInput | ParkingSpotWhereInput[]
    lot_id?: IntFilter<"ParkingSpot"> | number
    spot_number?: IntNullableFilter<"ParkingSpot"> | number | null
    reservable?: BoolFilter<"ParkingSpot"> | boolean
    description?: StringNullableFilter<"ParkingSpot"> | string | null
    price?: FloatFilter<"ParkingSpot"> | number
    is_reserved?: BoolFilter<"ParkingSpot"> | boolean
    lot?: XOR<ParkingLotRelationFilter, ParkingLotWhereInput>
    reservations?: ReservationListRelationFilter
    subleaseAgreements?: SubleaseAgreementListRelationFilter
    availabilities?: SpotAvailabilityListRelationFilter
  }, "spot_id">

  export type ParkingSpotOrderByWithAggregationInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrderInput | SortOrder
    reservable?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    is_reserved?: SortOrder
    _count?: ParkingSpotCountOrderByAggregateInput
    _avg?: ParkingSpotAvgOrderByAggregateInput
    _max?: ParkingSpotMaxOrderByAggregateInput
    _min?: ParkingSpotMinOrderByAggregateInput
    _sum?: ParkingSpotSumOrderByAggregateInput
  }

  export type ParkingSpotScalarWhereWithAggregatesInput = {
    AND?: ParkingSpotScalarWhereWithAggregatesInput | ParkingSpotScalarWhereWithAggregatesInput[]
    OR?: ParkingSpotScalarWhereWithAggregatesInput[]
    NOT?: ParkingSpotScalarWhereWithAggregatesInput | ParkingSpotScalarWhereWithAggregatesInput[]
    spot_id?: IntWithAggregatesFilter<"ParkingSpot"> | number
    lot_id?: IntWithAggregatesFilter<"ParkingSpot"> | number
    spot_number?: IntNullableWithAggregatesFilter<"ParkingSpot"> | number | null
    reservable?: BoolWithAggregatesFilter<"ParkingSpot"> | boolean
    description?: StringNullableWithAggregatesFilter<"ParkingSpot"> | string | null
    price?: FloatWithAggregatesFilter<"ParkingSpot"> | number
    is_reserved?: BoolWithAggregatesFilter<"ParkingSpot"> | boolean
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    reservation_id?: IntFilter<"Reservation"> | number
    spot_id?: IntFilter<"Reservation"> | number
    user_id?: IntFilter<"Reservation"> | number
    start_time?: DateTimeFilter<"Reservation"> | Date | string
    end_time?: DateTimeFilter<"Reservation"> | Date | string
    status?: EnumReservationStatusFilter<"Reservation"> | $Enums.ReservationStatus
    availability_id?: IntNullableFilter<"Reservation"> | number | null
    parkingSpot?: XOR<ParkingSpotRelationFilter, ParkingSpotWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    spotAvailability?: XOR<SpotAvailabilityNullableRelationFilter, SpotAvailabilityWhereInput> | null
  }

  export type ReservationOrderByWithRelationInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    availability_id?: SortOrderInput | SortOrder
    parkingSpot?: ParkingSpotOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    spotAvailability?: SpotAvailabilityOrderByWithRelationInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    reservation_id?: number
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    spot_id?: IntFilter<"Reservation"> | number
    user_id?: IntFilter<"Reservation"> | number
    start_time?: DateTimeFilter<"Reservation"> | Date | string
    end_time?: DateTimeFilter<"Reservation"> | Date | string
    status?: EnumReservationStatusFilter<"Reservation"> | $Enums.ReservationStatus
    availability_id?: IntNullableFilter<"Reservation"> | number | null
    parkingSpot?: XOR<ParkingSpotRelationFilter, ParkingSpotWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    spotAvailability?: XOR<SpotAvailabilityNullableRelationFilter, SpotAvailabilityWhereInput> | null
  }, "reservation_id">

  export type ReservationOrderByWithAggregationInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    availability_id?: SortOrderInput | SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _avg?: ReservationAvgOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
    _sum?: ReservationSumOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    reservation_id?: IntWithAggregatesFilter<"Reservation"> | number
    spot_id?: IntWithAggregatesFilter<"Reservation"> | number
    user_id?: IntWithAggregatesFilter<"Reservation"> | number
    start_time?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    end_time?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    status?: EnumReservationStatusWithAggregatesFilter<"Reservation"> | $Enums.ReservationStatus
    availability_id?: IntNullableWithAggregatesFilter<"Reservation"> | number | null
  }

  export type SpotAvailabilityWhereInput = {
    AND?: SpotAvailabilityWhereInput | SpotAvailabilityWhereInput[]
    OR?: SpotAvailabilityWhereInput[]
    NOT?: SpotAvailabilityWhereInput | SpotAvailabilityWhereInput[]
    availability_id?: IntFilter<"SpotAvailability"> | number
    spot_id?: IntFilter<"SpotAvailability"> | number
    start_time?: DateTimeFilter<"SpotAvailability"> | Date | string
    end_time?: DateTimeFilter<"SpotAvailability"> | Date | string
    status?: EnumAvailabilityStatusFilter<"SpotAvailability"> | $Enums.AvailabilityStatus
    parkingSpot?: XOR<ParkingSpotRelationFilter, ParkingSpotWhereInput>
    reservations?: ReservationListRelationFilter
  }

  export type SpotAvailabilityOrderByWithRelationInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    parkingSpot?: ParkingSpotOrderByWithRelationInput
    reservations?: ReservationOrderByRelationAggregateInput
  }

  export type SpotAvailabilityWhereUniqueInput = Prisma.AtLeast<{
    availability_id?: number
    unique_spot_availability?: SpotAvailabilityUnique_spot_availabilityCompoundUniqueInput
    AND?: SpotAvailabilityWhereInput | SpotAvailabilityWhereInput[]
    OR?: SpotAvailabilityWhereInput[]
    NOT?: SpotAvailabilityWhereInput | SpotAvailabilityWhereInput[]
    spot_id?: IntFilter<"SpotAvailability"> | number
    start_time?: DateTimeFilter<"SpotAvailability"> | Date | string
    end_time?: DateTimeFilter<"SpotAvailability"> | Date | string
    status?: EnumAvailabilityStatusFilter<"SpotAvailability"> | $Enums.AvailabilityStatus
    parkingSpot?: XOR<ParkingSpotRelationFilter, ParkingSpotWhereInput>
    reservations?: ReservationListRelationFilter
  }, "availability_id" | "unique_spot_availability">

  export type SpotAvailabilityOrderByWithAggregationInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    _count?: SpotAvailabilityCountOrderByAggregateInput
    _avg?: SpotAvailabilityAvgOrderByAggregateInput
    _max?: SpotAvailabilityMaxOrderByAggregateInput
    _min?: SpotAvailabilityMinOrderByAggregateInput
    _sum?: SpotAvailabilitySumOrderByAggregateInput
  }

  export type SpotAvailabilityScalarWhereWithAggregatesInput = {
    AND?: SpotAvailabilityScalarWhereWithAggregatesInput | SpotAvailabilityScalarWhereWithAggregatesInput[]
    OR?: SpotAvailabilityScalarWhereWithAggregatesInput[]
    NOT?: SpotAvailabilityScalarWhereWithAggregatesInput | SpotAvailabilityScalarWhereWithAggregatesInput[]
    availability_id?: IntWithAggregatesFilter<"SpotAvailability"> | number
    spot_id?: IntWithAggregatesFilter<"SpotAvailability"> | number
    start_time?: DateTimeWithAggregatesFilter<"SpotAvailability"> | Date | string
    end_time?: DateTimeWithAggregatesFilter<"SpotAvailability"> | Date | string
    status?: EnumAvailabilityStatusWithAggregatesFilter<"SpotAvailability"> | $Enums.AvailabilityStatus
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    review_id?: IntFilter<"Review"> | number
    lot_id?: IntFilter<"Review"> | number
    user_id?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    created_at?: DateTimeFilter<"Review"> | Date | string
    parkingLot?: XOR<ParkingLotRelationFilter, ParkingLotWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    created_at?: SortOrder
    parkingLot?: ParkingLotOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    review_id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    lot_id?: IntFilter<"Review"> | number
    user_id?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    created_at?: DateTimeFilter<"Review"> | Date | string
    parkingLot?: XOR<ParkingLotRelationFilter, ParkingLotWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "review_id">

  export type ReviewOrderByWithAggregationInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    review_id?: IntWithAggregatesFilter<"Review"> | number
    lot_id?: IntWithAggregatesFilter<"Review"> | number
    user_id?: IntWithAggregatesFilter<"Review"> | number
    rating?: IntWithAggregatesFilter<"Review"> | number
    comment?: StringNullableWithAggregatesFilter<"Review"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    message_id?: IntFilter<"Message"> | number
    sender_id?: IntFilter<"Message"> | number
    receiver_id?: IntFilter<"Message"> | number
    message_text?: StringFilter<"Message"> | string
    created_at?: DateTimeFilter<"Message"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    message_text?: SortOrder
    created_at?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    message_id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    sender_id?: IntFilter<"Message"> | number
    receiver_id?: IntFilter<"Message"> | number
    message_text?: StringFilter<"Message"> | string
    created_at?: DateTimeFilter<"Message"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }, "message_id">

  export type MessageOrderByWithAggregationInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    message_text?: SortOrder
    created_at?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    message_id?: IntWithAggregatesFilter<"Message"> | number
    sender_id?: IntWithAggregatesFilter<"Message"> | number
    receiver_id?: IntWithAggregatesFilter<"Message"> | number
    message_text?: StringWithAggregatesFilter<"Message"> | string
    created_at?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type SubleaseAgreementWhereInput = {
    AND?: SubleaseAgreementWhereInput | SubleaseAgreementWhereInput[]
    OR?: SubleaseAgreementWhereInput[]
    NOT?: SubleaseAgreementWhereInput | SubleaseAgreementWhereInput[]
    agreement_id?: IntFilter<"SubleaseAgreement"> | number
    original_leaser_id?: IntFilter<"SubleaseAgreement"> | number
    subleaser_id?: IntFilter<"SubleaseAgreement"> | number
    spot_id?: IntFilter<"SubleaseAgreement"> | number
    start_date?: DateTimeFilter<"SubleaseAgreement"> | Date | string
    end_date?: DateTimeFilter<"SubleaseAgreement"> | Date | string
    status?: EnumAgreementStatusFilter<"SubleaseAgreement"> | $Enums.AgreementStatus
    originalLeaser?: XOR<UserRelationFilter, UserWhereInput>
    subLeaser?: XOR<UserRelationFilter, UserWhereInput>
    parkingSpot?: XOR<ParkingSpotRelationFilter, ParkingSpotWhereInput>
  }

  export type SubleaseAgreementOrderByWithRelationInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    status?: SortOrder
    originalLeaser?: UserOrderByWithRelationInput
    subLeaser?: UserOrderByWithRelationInput
    parkingSpot?: ParkingSpotOrderByWithRelationInput
  }

  export type SubleaseAgreementWhereUniqueInput = Prisma.AtLeast<{
    agreement_id?: number
    AND?: SubleaseAgreementWhereInput | SubleaseAgreementWhereInput[]
    OR?: SubleaseAgreementWhereInput[]
    NOT?: SubleaseAgreementWhereInput | SubleaseAgreementWhereInput[]
    original_leaser_id?: IntFilter<"SubleaseAgreement"> | number
    subleaser_id?: IntFilter<"SubleaseAgreement"> | number
    spot_id?: IntFilter<"SubleaseAgreement"> | number
    start_date?: DateTimeFilter<"SubleaseAgreement"> | Date | string
    end_date?: DateTimeFilter<"SubleaseAgreement"> | Date | string
    status?: EnumAgreementStatusFilter<"SubleaseAgreement"> | $Enums.AgreementStatus
    originalLeaser?: XOR<UserRelationFilter, UserWhereInput>
    subLeaser?: XOR<UserRelationFilter, UserWhereInput>
    parkingSpot?: XOR<ParkingSpotRelationFilter, ParkingSpotWhereInput>
  }, "agreement_id">

  export type SubleaseAgreementOrderByWithAggregationInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    status?: SortOrder
    _count?: SubleaseAgreementCountOrderByAggregateInput
    _avg?: SubleaseAgreementAvgOrderByAggregateInput
    _max?: SubleaseAgreementMaxOrderByAggregateInput
    _min?: SubleaseAgreementMinOrderByAggregateInput
    _sum?: SubleaseAgreementSumOrderByAggregateInput
  }

  export type SubleaseAgreementScalarWhereWithAggregatesInput = {
    AND?: SubleaseAgreementScalarWhereWithAggregatesInput | SubleaseAgreementScalarWhereWithAggregatesInput[]
    OR?: SubleaseAgreementScalarWhereWithAggregatesInput[]
    NOT?: SubleaseAgreementScalarWhereWithAggregatesInput | SubleaseAgreementScalarWhereWithAggregatesInput[]
    agreement_id?: IntWithAggregatesFilter<"SubleaseAgreement"> | number
    original_leaser_id?: IntWithAggregatesFilter<"SubleaseAgreement"> | number
    subleaser_id?: IntWithAggregatesFilter<"SubleaseAgreement"> | number
    spot_id?: IntWithAggregatesFilter<"SubleaseAgreement"> | number
    start_date?: DateTimeWithAggregatesFilter<"SubleaseAgreement"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"SubleaseAgreement"> | Date | string
    status?: EnumAgreementStatusWithAggregatesFilter<"SubleaseAgreement"> | $Enums.AgreementStatus
  }

  export type UserCreateInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    reservations?: ReservationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
  }

  export type ParkingLotCreateInput = {
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner: UserCreateNestedOneWithoutOwnedLotsInput
    parkingSpots?: ParkingSpotCreateNestedManyWithoutLotInput
    reviews?: ReviewCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotUncheckedCreateInput = {
    lot_id?: number
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner_id: number
    parkingSpots?: ParkingSpotUncheckedCreateNestedManyWithoutLotInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutOwnedLotsNestedInput
    parkingSpots?: ParkingSpotUpdateManyWithoutLotNestedInput
    reviews?: ReviewUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotUncheckedUpdateInput = {
    lot_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner_id?: IntFieldUpdateOperationsInput | number
    parkingSpots?: ParkingSpotUncheckedUpdateManyWithoutLotNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotCreateManyInput = {
    lot_id?: number
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner_id: number
  }

  export type ParkingLotUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParkingLotUncheckedUpdateManyInput = {
    lot_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner_id?: IntFieldUpdateOperationsInput | number
  }

  export type ParkingSpotCreateInput = {
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    lot: ParkingLotCreateNestedOneWithoutParkingSpotsInput
    reservations?: ReservationCreateNestedManyWithoutParkingSpotInput
    subleaseAgreements?: SubleaseAgreementCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotUncheckedCreateInput = {
    spot_id?: number
    lot_id: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    reservations?: ReservationUncheckedCreateNestedManyWithoutParkingSpotInput
    subleaseAgreements?: SubleaseAgreementUncheckedCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityUncheckedCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotUpdateInput = {
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    lot?: ParkingLotUpdateOneRequiredWithoutParkingSpotsNestedInput
    reservations?: ReservationUpdateManyWithoutParkingSpotNestedInput
    subleaseAgreements?: SubleaseAgreementUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotUncheckedUpdateInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    reservations?: ReservationUncheckedUpdateManyWithoutParkingSpotNestedInput
    subleaseAgreements?: SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotCreateManyInput = {
    spot_id?: number
    lot_id: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
  }

  export type ParkingSpotUpdateManyMutationInput = {
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParkingSpotUncheckedUpdateManyInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReservationCreateInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    parkingSpot: ParkingSpotCreateNestedOneWithoutReservationsInput
    user: UserCreateNestedOneWithoutReservationsInput
    spotAvailability?: SpotAvailabilityCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateInput = {
    reservation_id?: number
    spot_id: number
    user_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    availability_id?: number | null
  }

  export type ReservationUpdateInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutReservationsNestedInput
    user?: UserUpdateOneRequiredWithoutReservationsNestedInput
    spotAvailability?: SpotAvailabilityUpdateOneWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    availability_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReservationCreateManyInput = {
    reservation_id?: number
    spot_id: number
    user_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    availability_id?: number | null
  }

  export type ReservationUpdateManyMutationInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
  }

  export type ReservationUncheckedUpdateManyInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    availability_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SpotAvailabilityCreateInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
    parkingSpot: ParkingSpotCreateNestedOneWithoutAvailabilitiesInput
    reservations?: ReservationCreateNestedManyWithoutSpotAvailabilityInput
  }

  export type SpotAvailabilityUncheckedCreateInput = {
    availability_id?: number
    spot_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
    reservations?: ReservationUncheckedCreateNestedManyWithoutSpotAvailabilityInput
  }

  export type SpotAvailabilityUpdateInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutAvailabilitiesNestedInput
    reservations?: ReservationUpdateManyWithoutSpotAvailabilityNestedInput
  }

  export type SpotAvailabilityUncheckedUpdateInput = {
    availability_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
    reservations?: ReservationUncheckedUpdateManyWithoutSpotAvailabilityNestedInput
  }

  export type SpotAvailabilityCreateManyInput = {
    availability_id?: number
    spot_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
  }

  export type SpotAvailabilityUpdateManyMutationInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
  }

  export type SpotAvailabilityUncheckedUpdateManyInput = {
    availability_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
  }

  export type ReviewCreateInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string
    parkingLot: ParkingLotCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    review_id?: number
    lot_id: number
    user_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ReviewUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parkingLot?: ParkingLotUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyInput = {
    review_id?: number
    lot_id: number
    user_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    message_text: string
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
    receiver: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    message_id?: number
    sender_id: number
    receiver_id: number
    message_text: string
    created_at?: Date | string
  }

  export type MessageUpdateInput = {
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    sender_id?: IntFieldUpdateOperationsInput | number
    receiver_id?: IntFieldUpdateOperationsInput | number
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    message_id?: number
    sender_id: number
    receiver_id: number
    message_text: string
    created_at?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    sender_id?: IntFieldUpdateOperationsInput | number
    receiver_id?: IntFieldUpdateOperationsInput | number
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubleaseAgreementCreateInput = {
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
    originalLeaser: UserCreateNestedOneWithoutOriginalLeasesInput
    subLeaser: UserCreateNestedOneWithoutSubLeasesInput
    parkingSpot: ParkingSpotCreateNestedOneWithoutSubleaseAgreementsInput
  }

  export type SubleaseAgreementUncheckedCreateInput = {
    agreement_id?: number
    original_leaser_id: number
    subleaser_id: number
    spot_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SubleaseAgreementUpdateInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    originalLeaser?: UserUpdateOneRequiredWithoutOriginalLeasesNestedInput
    subLeaser?: UserUpdateOneRequiredWithoutSubLeasesNestedInput
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutSubleaseAgreementsNestedInput
  }

  export type SubleaseAgreementUncheckedUpdateInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    original_leaser_id?: IntFieldUpdateOperationsInput | number
    subleaser_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SubleaseAgreementCreateManyInput = {
    agreement_id?: number
    original_leaser_id: number
    subleaser_id: number
    spot_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SubleaseAgreementUpdateManyMutationInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SubleaseAgreementUncheckedUpdateManyInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    original_leaser_id?: IntFieldUpdateOperationsInput | number
    subleaser_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type ParkingLotListRelationFilter = {
    every?: ParkingLotWhereInput
    some?: ParkingLotWhereInput
    none?: ParkingLotWhereInput
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type SubleaseAgreementListRelationFilter = {
    every?: SubleaseAgreementWhereInput
    some?: SubleaseAgreementWhereInput
    none?: SubleaseAgreementWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ParkingLotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubleaseAgreementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrder
    user_type?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrder
    user_type?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    profile_picture?: SortOrder
    user_type?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ParkingSpotListRelationFilter = {
    every?: ParkingSpotWhereInput
    some?: ParkingSpotWhereInput
    none?: ParkingSpotWhereInput
  }

  export type ParkingSpotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParkingLotCountOrderByAggregateInput = {
    lot_id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    spot_numbering?: SortOrder
    owner_id?: SortOrder
  }

  export type ParkingLotAvgOrderByAggregateInput = {
    lot_id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    owner_id?: SortOrder
  }

  export type ParkingLotMaxOrderByAggregateInput = {
    lot_id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    spot_numbering?: SortOrder
    owner_id?: SortOrder
  }

  export type ParkingLotMinOrderByAggregateInput = {
    lot_id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    spot_numbering?: SortOrder
    owner_id?: SortOrder
  }

  export type ParkingLotSumOrderByAggregateInput = {
    lot_id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    total_spots?: SortOrder
    owner_id?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ParkingLotRelationFilter = {
    is?: ParkingLotWhereInput
    isNot?: ParkingLotWhereInput
  }

  export type SpotAvailabilityListRelationFilter = {
    every?: SpotAvailabilityWhereInput
    some?: SpotAvailabilityWhereInput
    none?: SpotAvailabilityWhereInput
  }

  export type SpotAvailabilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParkingSpotCountOrderByAggregateInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrder
    reservable?: SortOrder
    description?: SortOrder
    price?: SortOrder
    is_reserved?: SortOrder
  }

  export type ParkingSpotAvgOrderByAggregateInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrder
    price?: SortOrder
  }

  export type ParkingSpotMaxOrderByAggregateInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrder
    reservable?: SortOrder
    description?: SortOrder
    price?: SortOrder
    is_reserved?: SortOrder
  }

  export type ParkingSpotMinOrderByAggregateInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrder
    reservable?: SortOrder
    description?: SortOrder
    price?: SortOrder
    is_reserved?: SortOrder
  }

  export type ParkingSpotSumOrderByAggregateInput = {
    spot_id?: SortOrder
    lot_id?: SortOrder
    spot_number?: SortOrder
    price?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumReservationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusFilter<$PrismaModel> | $Enums.ReservationStatus
  }

  export type ParkingSpotRelationFilter = {
    is?: ParkingSpotWhereInput
    isNot?: ParkingSpotWhereInput
  }

  export type SpotAvailabilityNullableRelationFilter = {
    is?: SpotAvailabilityWhereInput | null
    isNot?: SpotAvailabilityWhereInput | null
  }

  export type ReservationCountOrderByAggregateInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    availability_id?: SortOrder
  }

  export type ReservationAvgOrderByAggregateInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    availability_id?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    availability_id?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
    availability_id?: SortOrder
  }

  export type ReservationSumOrderByAggregateInput = {
    reservation_id?: SortOrder
    spot_id?: SortOrder
    user_id?: SortOrder
    availability_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumReservationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReservationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationStatusFilter<$PrismaModel>
    _max?: NestedEnumReservationStatusFilter<$PrismaModel>
  }

  export type EnumAvailabilityStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AvailabilityStatus | EnumAvailabilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAvailabilityStatusFilter<$PrismaModel> | $Enums.AvailabilityStatus
  }

  export type SpotAvailabilityUnique_spot_availabilityCompoundUniqueInput = {
    spot_id: number
    start_time: Date | string
    end_time: Date | string
  }

  export type SpotAvailabilityCountOrderByAggregateInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
  }

  export type SpotAvailabilityAvgOrderByAggregateInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
  }

  export type SpotAvailabilityMaxOrderByAggregateInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
  }

  export type SpotAvailabilityMinOrderByAggregateInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    status?: SortOrder
  }

  export type SpotAvailabilitySumOrderByAggregateInput = {
    availability_id?: SortOrder
    spot_id?: SortOrder
  }

  export type EnumAvailabilityStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AvailabilityStatus | EnumAvailabilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAvailabilityStatusWithAggregatesFilter<$PrismaModel> | $Enums.AvailabilityStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAvailabilityStatusFilter<$PrismaModel>
    _max?: NestedEnumAvailabilityStatusFilter<$PrismaModel>
  }

  export type ReviewCountOrderByAggregateInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    review_id?: SortOrder
    lot_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    message_text?: SortOrder
    created_at?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    message_text?: SortOrder
    created_at?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
    message_text?: SortOrder
    created_at?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    message_id?: SortOrder
    sender_id?: SortOrder
    receiver_id?: SortOrder
  }

  export type EnumAgreementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusFilter<$PrismaModel> | $Enums.AgreementStatus
  }

  export type SubleaseAgreementCountOrderByAggregateInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    status?: SortOrder
  }

  export type SubleaseAgreementAvgOrderByAggregateInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
  }

  export type SubleaseAgreementMaxOrderByAggregateInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    status?: SortOrder
  }

  export type SubleaseAgreementMinOrderByAggregateInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    status?: SortOrder
  }

  export type SubleaseAgreementSumOrderByAggregateInput = {
    agreement_id?: SortOrder
    original_leaser_id?: SortOrder
    subleaser_id?: SortOrder
    spot_id?: SortOrder
  }

  export type EnumAgreementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusWithAggregatesFilter<$PrismaModel> | $Enums.AgreementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAgreementStatusFilter<$PrismaModel>
    _max?: NestedEnumAgreementStatusFilter<$PrismaModel>
  }

  export type ParkingLotCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ParkingLotCreateWithoutOwnerInput, ParkingLotUncheckedCreateWithoutOwnerInput> | ParkingLotCreateWithoutOwnerInput[] | ParkingLotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParkingLotCreateOrConnectWithoutOwnerInput | ParkingLotCreateOrConnectWithoutOwnerInput[]
    createMany?: ParkingLotCreateManyOwnerInputEnvelope
    connect?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
  }

  export type ReservationCreateNestedManyWithoutUserInput = {
    create?: XOR<ReservationCreateWithoutUserInput, ReservationUncheckedCreateWithoutUserInput> | ReservationCreateWithoutUserInput[] | ReservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserInput | ReservationCreateOrConnectWithoutUserInput[]
    createMany?: ReservationCreateManyUserInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput = {
    create?: XOR<SubleaseAgreementCreateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput> | SubleaseAgreementCreateWithoutOriginalLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput | SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput[]
    createMany?: SubleaseAgreementCreateManyOriginalLeaserInputEnvelope
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
  }

  export type SubleaseAgreementCreateNestedManyWithoutSubLeaserInput = {
    create?: XOR<SubleaseAgreementCreateWithoutSubLeaserInput, SubleaseAgreementUncheckedCreateWithoutSubLeaserInput> | SubleaseAgreementCreateWithoutSubLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutSubLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutSubLeaserInput | SubleaseAgreementCreateOrConnectWithoutSubLeaserInput[]
    createMany?: SubleaseAgreementCreateManySubLeaserInputEnvelope
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ParkingLotUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ParkingLotCreateWithoutOwnerInput, ParkingLotUncheckedCreateWithoutOwnerInput> | ParkingLotCreateWithoutOwnerInput[] | ParkingLotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParkingLotCreateOrConnectWithoutOwnerInput | ParkingLotCreateOrConnectWithoutOwnerInput[]
    createMany?: ParkingLotCreateManyOwnerInputEnvelope
    connect?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReservationCreateWithoutUserInput, ReservationUncheckedCreateWithoutUserInput> | ReservationCreateWithoutUserInput[] | ReservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserInput | ReservationCreateOrConnectWithoutUserInput[]
    createMany?: ReservationCreateManyUserInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput = {
    create?: XOR<SubleaseAgreementCreateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput> | SubleaseAgreementCreateWithoutOriginalLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput | SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput[]
    createMany?: SubleaseAgreementCreateManyOriginalLeaserInputEnvelope
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
  }

  export type SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput = {
    create?: XOR<SubleaseAgreementCreateWithoutSubLeaserInput, SubleaseAgreementUncheckedCreateWithoutSubLeaserInput> | SubleaseAgreementCreateWithoutSubLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutSubLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutSubLeaserInput | SubleaseAgreementCreateOrConnectWithoutSubLeaserInput[]
    createMany?: SubleaseAgreementCreateManySubLeaserInputEnvelope
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type ParkingLotUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ParkingLotCreateWithoutOwnerInput, ParkingLotUncheckedCreateWithoutOwnerInput> | ParkingLotCreateWithoutOwnerInput[] | ParkingLotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParkingLotCreateOrConnectWithoutOwnerInput | ParkingLotCreateOrConnectWithoutOwnerInput[]
    upsert?: ParkingLotUpsertWithWhereUniqueWithoutOwnerInput | ParkingLotUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ParkingLotCreateManyOwnerInputEnvelope
    set?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    disconnect?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    delete?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    connect?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    update?: ParkingLotUpdateWithWhereUniqueWithoutOwnerInput | ParkingLotUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ParkingLotUpdateManyWithWhereWithoutOwnerInput | ParkingLotUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ParkingLotScalarWhereInput | ParkingLotScalarWhereInput[]
  }

  export type ReservationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReservationCreateWithoutUserInput, ReservationUncheckedCreateWithoutUserInput> | ReservationCreateWithoutUserInput[] | ReservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserInput | ReservationCreateOrConnectWithoutUserInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutUserInput | ReservationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReservationCreateManyUserInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutUserInput | ReservationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutUserInput | ReservationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput = {
    create?: XOR<SubleaseAgreementCreateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput> | SubleaseAgreementCreateWithoutOriginalLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput | SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput[]
    upsert?: SubleaseAgreementUpsertWithWhereUniqueWithoutOriginalLeaserInput | SubleaseAgreementUpsertWithWhereUniqueWithoutOriginalLeaserInput[]
    createMany?: SubleaseAgreementCreateManyOriginalLeaserInputEnvelope
    set?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    disconnect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    delete?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    update?: SubleaseAgreementUpdateWithWhereUniqueWithoutOriginalLeaserInput | SubleaseAgreementUpdateWithWhereUniqueWithoutOriginalLeaserInput[]
    updateMany?: SubleaseAgreementUpdateManyWithWhereWithoutOriginalLeaserInput | SubleaseAgreementUpdateManyWithWhereWithoutOriginalLeaserInput[]
    deleteMany?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
  }

  export type SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput = {
    create?: XOR<SubleaseAgreementCreateWithoutSubLeaserInput, SubleaseAgreementUncheckedCreateWithoutSubLeaserInput> | SubleaseAgreementCreateWithoutSubLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutSubLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutSubLeaserInput | SubleaseAgreementCreateOrConnectWithoutSubLeaserInput[]
    upsert?: SubleaseAgreementUpsertWithWhereUniqueWithoutSubLeaserInput | SubleaseAgreementUpsertWithWhereUniqueWithoutSubLeaserInput[]
    createMany?: SubleaseAgreementCreateManySubLeaserInputEnvelope
    set?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    disconnect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    delete?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    update?: SubleaseAgreementUpdateWithWhereUniqueWithoutSubLeaserInput | SubleaseAgreementUpdateWithWhereUniqueWithoutSubLeaserInput[]
    updateMany?: SubleaseAgreementUpdateManyWithWhereWithoutSubLeaserInput | SubleaseAgreementUpdateManyWithWhereWithoutSubLeaserInput[]
    deleteMany?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ParkingLotCreateWithoutOwnerInput, ParkingLotUncheckedCreateWithoutOwnerInput> | ParkingLotCreateWithoutOwnerInput[] | ParkingLotUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ParkingLotCreateOrConnectWithoutOwnerInput | ParkingLotCreateOrConnectWithoutOwnerInput[]
    upsert?: ParkingLotUpsertWithWhereUniqueWithoutOwnerInput | ParkingLotUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ParkingLotCreateManyOwnerInputEnvelope
    set?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    disconnect?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    delete?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    connect?: ParkingLotWhereUniqueInput | ParkingLotWhereUniqueInput[]
    update?: ParkingLotUpdateWithWhereUniqueWithoutOwnerInput | ParkingLotUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ParkingLotUpdateManyWithWhereWithoutOwnerInput | ParkingLotUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ParkingLotScalarWhereInput | ParkingLotScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReservationCreateWithoutUserInput, ReservationUncheckedCreateWithoutUserInput> | ReservationCreateWithoutUserInput[] | ReservationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutUserInput | ReservationCreateOrConnectWithoutUserInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutUserInput | ReservationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReservationCreateManyUserInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutUserInput | ReservationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutUserInput | ReservationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput = {
    create?: XOR<SubleaseAgreementCreateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput> | SubleaseAgreementCreateWithoutOriginalLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput | SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput[]
    upsert?: SubleaseAgreementUpsertWithWhereUniqueWithoutOriginalLeaserInput | SubleaseAgreementUpsertWithWhereUniqueWithoutOriginalLeaserInput[]
    createMany?: SubleaseAgreementCreateManyOriginalLeaserInputEnvelope
    set?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    disconnect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    delete?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    update?: SubleaseAgreementUpdateWithWhereUniqueWithoutOriginalLeaserInput | SubleaseAgreementUpdateWithWhereUniqueWithoutOriginalLeaserInput[]
    updateMany?: SubleaseAgreementUpdateManyWithWhereWithoutOriginalLeaserInput | SubleaseAgreementUpdateManyWithWhereWithoutOriginalLeaserInput[]
    deleteMany?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
  }

  export type SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput = {
    create?: XOR<SubleaseAgreementCreateWithoutSubLeaserInput, SubleaseAgreementUncheckedCreateWithoutSubLeaserInput> | SubleaseAgreementCreateWithoutSubLeaserInput[] | SubleaseAgreementUncheckedCreateWithoutSubLeaserInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutSubLeaserInput | SubleaseAgreementCreateOrConnectWithoutSubLeaserInput[]
    upsert?: SubleaseAgreementUpsertWithWhereUniqueWithoutSubLeaserInput | SubleaseAgreementUpsertWithWhereUniqueWithoutSubLeaserInput[]
    createMany?: SubleaseAgreementCreateManySubLeaserInputEnvelope
    set?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    disconnect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    delete?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    update?: SubleaseAgreementUpdateWithWhereUniqueWithoutSubLeaserInput | SubleaseAgreementUpdateWithWhereUniqueWithoutSubLeaserInput[]
    updateMany?: SubleaseAgreementUpdateManyWithWhereWithoutSubLeaserInput | SubleaseAgreementUpdateManyWithWhereWithoutSubLeaserInput[]
    deleteMany?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedLotsInput = {
    create?: XOR<UserCreateWithoutOwnedLotsInput, UserUncheckedCreateWithoutOwnedLotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotsInput
    connect?: UserWhereUniqueInput
  }

  export type ParkingSpotCreateNestedManyWithoutLotInput = {
    create?: XOR<ParkingSpotCreateWithoutLotInput, ParkingSpotUncheckedCreateWithoutLotInput> | ParkingSpotCreateWithoutLotInput[] | ParkingSpotUncheckedCreateWithoutLotInput[]
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutLotInput | ParkingSpotCreateOrConnectWithoutLotInput[]
    createMany?: ParkingSpotCreateManyLotInputEnvelope
    connect?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutParkingLotInput = {
    create?: XOR<ReviewCreateWithoutParkingLotInput, ReviewUncheckedCreateWithoutParkingLotInput> | ReviewCreateWithoutParkingLotInput[] | ReviewUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutParkingLotInput | ReviewCreateOrConnectWithoutParkingLotInput[]
    createMany?: ReviewCreateManyParkingLotInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ParkingSpotUncheckedCreateNestedManyWithoutLotInput = {
    create?: XOR<ParkingSpotCreateWithoutLotInput, ParkingSpotUncheckedCreateWithoutLotInput> | ParkingSpotCreateWithoutLotInput[] | ParkingSpotUncheckedCreateWithoutLotInput[]
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutLotInput | ParkingSpotCreateOrConnectWithoutLotInput[]
    createMany?: ParkingSpotCreateManyLotInputEnvelope
    connect?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutParkingLotInput = {
    create?: XOR<ReviewCreateWithoutParkingLotInput, ReviewUncheckedCreateWithoutParkingLotInput> | ReviewCreateWithoutParkingLotInput[] | ReviewUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutParkingLotInput | ReviewCreateOrConnectWithoutParkingLotInput[]
    createMany?: ReviewCreateManyParkingLotInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutOwnedLotsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedLotsInput, UserUncheckedCreateWithoutOwnedLotsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedLotsInput
    upsert?: UserUpsertWithoutOwnedLotsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedLotsInput, UserUpdateWithoutOwnedLotsInput>, UserUncheckedUpdateWithoutOwnedLotsInput>
  }

  export type ParkingSpotUpdateManyWithoutLotNestedInput = {
    create?: XOR<ParkingSpotCreateWithoutLotInput, ParkingSpotUncheckedCreateWithoutLotInput> | ParkingSpotCreateWithoutLotInput[] | ParkingSpotUncheckedCreateWithoutLotInput[]
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutLotInput | ParkingSpotCreateOrConnectWithoutLotInput[]
    upsert?: ParkingSpotUpsertWithWhereUniqueWithoutLotInput | ParkingSpotUpsertWithWhereUniqueWithoutLotInput[]
    createMany?: ParkingSpotCreateManyLotInputEnvelope
    set?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    disconnect?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    delete?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    connect?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    update?: ParkingSpotUpdateWithWhereUniqueWithoutLotInput | ParkingSpotUpdateWithWhereUniqueWithoutLotInput[]
    updateMany?: ParkingSpotUpdateManyWithWhereWithoutLotInput | ParkingSpotUpdateManyWithWhereWithoutLotInput[]
    deleteMany?: ParkingSpotScalarWhereInput | ParkingSpotScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutParkingLotNestedInput = {
    create?: XOR<ReviewCreateWithoutParkingLotInput, ReviewUncheckedCreateWithoutParkingLotInput> | ReviewCreateWithoutParkingLotInput[] | ReviewUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutParkingLotInput | ReviewCreateOrConnectWithoutParkingLotInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutParkingLotInput | ReviewUpsertWithWhereUniqueWithoutParkingLotInput[]
    createMany?: ReviewCreateManyParkingLotInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutParkingLotInput | ReviewUpdateWithWhereUniqueWithoutParkingLotInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutParkingLotInput | ReviewUpdateManyWithWhereWithoutParkingLotInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ParkingSpotUncheckedUpdateManyWithoutLotNestedInput = {
    create?: XOR<ParkingSpotCreateWithoutLotInput, ParkingSpotUncheckedCreateWithoutLotInput> | ParkingSpotCreateWithoutLotInput[] | ParkingSpotUncheckedCreateWithoutLotInput[]
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutLotInput | ParkingSpotCreateOrConnectWithoutLotInput[]
    upsert?: ParkingSpotUpsertWithWhereUniqueWithoutLotInput | ParkingSpotUpsertWithWhereUniqueWithoutLotInput[]
    createMany?: ParkingSpotCreateManyLotInputEnvelope
    set?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    disconnect?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    delete?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    connect?: ParkingSpotWhereUniqueInput | ParkingSpotWhereUniqueInput[]
    update?: ParkingSpotUpdateWithWhereUniqueWithoutLotInput | ParkingSpotUpdateWithWhereUniqueWithoutLotInput[]
    updateMany?: ParkingSpotUpdateManyWithWhereWithoutLotInput | ParkingSpotUpdateManyWithWhereWithoutLotInput[]
    deleteMany?: ParkingSpotScalarWhereInput | ParkingSpotScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutParkingLotNestedInput = {
    create?: XOR<ReviewCreateWithoutParkingLotInput, ReviewUncheckedCreateWithoutParkingLotInput> | ReviewCreateWithoutParkingLotInput[] | ReviewUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutParkingLotInput | ReviewCreateOrConnectWithoutParkingLotInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutParkingLotInput | ReviewUpsertWithWhereUniqueWithoutParkingLotInput[]
    createMany?: ReviewCreateManyParkingLotInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutParkingLotInput | ReviewUpdateWithWhereUniqueWithoutParkingLotInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutParkingLotInput | ReviewUpdateManyWithWhereWithoutParkingLotInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ParkingLotCreateNestedOneWithoutParkingSpotsInput = {
    create?: XOR<ParkingLotCreateWithoutParkingSpotsInput, ParkingLotUncheckedCreateWithoutParkingSpotsInput>
    connectOrCreate?: ParkingLotCreateOrConnectWithoutParkingSpotsInput
    connect?: ParkingLotWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutParkingSpotInput = {
    create?: XOR<ReservationCreateWithoutParkingSpotInput, ReservationUncheckedCreateWithoutParkingSpotInput> | ReservationCreateWithoutParkingSpotInput[] | ReservationUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutParkingSpotInput | ReservationCreateOrConnectWithoutParkingSpotInput[]
    createMany?: ReservationCreateManyParkingSpotInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type SubleaseAgreementCreateNestedManyWithoutParkingSpotInput = {
    create?: XOR<SubleaseAgreementCreateWithoutParkingSpotInput, SubleaseAgreementUncheckedCreateWithoutParkingSpotInput> | SubleaseAgreementCreateWithoutParkingSpotInput[] | SubleaseAgreementUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutParkingSpotInput | SubleaseAgreementCreateOrConnectWithoutParkingSpotInput[]
    createMany?: SubleaseAgreementCreateManyParkingSpotInputEnvelope
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
  }

  export type SpotAvailabilityCreateNestedManyWithoutParkingSpotInput = {
    create?: XOR<SpotAvailabilityCreateWithoutParkingSpotInput, SpotAvailabilityUncheckedCreateWithoutParkingSpotInput> | SpotAvailabilityCreateWithoutParkingSpotInput[] | SpotAvailabilityUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SpotAvailabilityCreateOrConnectWithoutParkingSpotInput | SpotAvailabilityCreateOrConnectWithoutParkingSpotInput[]
    createMany?: SpotAvailabilityCreateManyParkingSpotInputEnvelope
    connect?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutParkingSpotInput = {
    create?: XOR<ReservationCreateWithoutParkingSpotInput, ReservationUncheckedCreateWithoutParkingSpotInput> | ReservationCreateWithoutParkingSpotInput[] | ReservationUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutParkingSpotInput | ReservationCreateOrConnectWithoutParkingSpotInput[]
    createMany?: ReservationCreateManyParkingSpotInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type SubleaseAgreementUncheckedCreateNestedManyWithoutParkingSpotInput = {
    create?: XOR<SubleaseAgreementCreateWithoutParkingSpotInput, SubleaseAgreementUncheckedCreateWithoutParkingSpotInput> | SubleaseAgreementCreateWithoutParkingSpotInput[] | SubleaseAgreementUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutParkingSpotInput | SubleaseAgreementCreateOrConnectWithoutParkingSpotInput[]
    createMany?: SubleaseAgreementCreateManyParkingSpotInputEnvelope
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
  }

  export type SpotAvailabilityUncheckedCreateNestedManyWithoutParkingSpotInput = {
    create?: XOR<SpotAvailabilityCreateWithoutParkingSpotInput, SpotAvailabilityUncheckedCreateWithoutParkingSpotInput> | SpotAvailabilityCreateWithoutParkingSpotInput[] | SpotAvailabilityUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SpotAvailabilityCreateOrConnectWithoutParkingSpotInput | SpotAvailabilityCreateOrConnectWithoutParkingSpotInput[]
    createMany?: SpotAvailabilityCreateManyParkingSpotInputEnvelope
    connect?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ParkingLotUpdateOneRequiredWithoutParkingSpotsNestedInput = {
    create?: XOR<ParkingLotCreateWithoutParkingSpotsInput, ParkingLotUncheckedCreateWithoutParkingSpotsInput>
    connectOrCreate?: ParkingLotCreateOrConnectWithoutParkingSpotsInput
    upsert?: ParkingLotUpsertWithoutParkingSpotsInput
    connect?: ParkingLotWhereUniqueInput
    update?: XOR<XOR<ParkingLotUpdateToOneWithWhereWithoutParkingSpotsInput, ParkingLotUpdateWithoutParkingSpotsInput>, ParkingLotUncheckedUpdateWithoutParkingSpotsInput>
  }

  export type ReservationUpdateManyWithoutParkingSpotNestedInput = {
    create?: XOR<ReservationCreateWithoutParkingSpotInput, ReservationUncheckedCreateWithoutParkingSpotInput> | ReservationCreateWithoutParkingSpotInput[] | ReservationUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutParkingSpotInput | ReservationCreateOrConnectWithoutParkingSpotInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutParkingSpotInput | ReservationUpsertWithWhereUniqueWithoutParkingSpotInput[]
    createMany?: ReservationCreateManyParkingSpotInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutParkingSpotInput | ReservationUpdateWithWhereUniqueWithoutParkingSpotInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutParkingSpotInput | ReservationUpdateManyWithWhereWithoutParkingSpotInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type SubleaseAgreementUpdateManyWithoutParkingSpotNestedInput = {
    create?: XOR<SubleaseAgreementCreateWithoutParkingSpotInput, SubleaseAgreementUncheckedCreateWithoutParkingSpotInput> | SubleaseAgreementCreateWithoutParkingSpotInput[] | SubleaseAgreementUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutParkingSpotInput | SubleaseAgreementCreateOrConnectWithoutParkingSpotInput[]
    upsert?: SubleaseAgreementUpsertWithWhereUniqueWithoutParkingSpotInput | SubleaseAgreementUpsertWithWhereUniqueWithoutParkingSpotInput[]
    createMany?: SubleaseAgreementCreateManyParkingSpotInputEnvelope
    set?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    disconnect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    delete?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    update?: SubleaseAgreementUpdateWithWhereUniqueWithoutParkingSpotInput | SubleaseAgreementUpdateWithWhereUniqueWithoutParkingSpotInput[]
    updateMany?: SubleaseAgreementUpdateManyWithWhereWithoutParkingSpotInput | SubleaseAgreementUpdateManyWithWhereWithoutParkingSpotInput[]
    deleteMany?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
  }

  export type SpotAvailabilityUpdateManyWithoutParkingSpotNestedInput = {
    create?: XOR<SpotAvailabilityCreateWithoutParkingSpotInput, SpotAvailabilityUncheckedCreateWithoutParkingSpotInput> | SpotAvailabilityCreateWithoutParkingSpotInput[] | SpotAvailabilityUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SpotAvailabilityCreateOrConnectWithoutParkingSpotInput | SpotAvailabilityCreateOrConnectWithoutParkingSpotInput[]
    upsert?: SpotAvailabilityUpsertWithWhereUniqueWithoutParkingSpotInput | SpotAvailabilityUpsertWithWhereUniqueWithoutParkingSpotInput[]
    createMany?: SpotAvailabilityCreateManyParkingSpotInputEnvelope
    set?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    disconnect?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    delete?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    connect?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    update?: SpotAvailabilityUpdateWithWhereUniqueWithoutParkingSpotInput | SpotAvailabilityUpdateWithWhereUniqueWithoutParkingSpotInput[]
    updateMany?: SpotAvailabilityUpdateManyWithWhereWithoutParkingSpotInput | SpotAvailabilityUpdateManyWithWhereWithoutParkingSpotInput[]
    deleteMany?: SpotAvailabilityScalarWhereInput | SpotAvailabilityScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutParkingSpotNestedInput = {
    create?: XOR<ReservationCreateWithoutParkingSpotInput, ReservationUncheckedCreateWithoutParkingSpotInput> | ReservationCreateWithoutParkingSpotInput[] | ReservationUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutParkingSpotInput | ReservationCreateOrConnectWithoutParkingSpotInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutParkingSpotInput | ReservationUpsertWithWhereUniqueWithoutParkingSpotInput[]
    createMany?: ReservationCreateManyParkingSpotInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutParkingSpotInput | ReservationUpdateWithWhereUniqueWithoutParkingSpotInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutParkingSpotInput | ReservationUpdateManyWithWhereWithoutParkingSpotInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotNestedInput = {
    create?: XOR<SubleaseAgreementCreateWithoutParkingSpotInput, SubleaseAgreementUncheckedCreateWithoutParkingSpotInput> | SubleaseAgreementCreateWithoutParkingSpotInput[] | SubleaseAgreementUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SubleaseAgreementCreateOrConnectWithoutParkingSpotInput | SubleaseAgreementCreateOrConnectWithoutParkingSpotInput[]
    upsert?: SubleaseAgreementUpsertWithWhereUniqueWithoutParkingSpotInput | SubleaseAgreementUpsertWithWhereUniqueWithoutParkingSpotInput[]
    createMany?: SubleaseAgreementCreateManyParkingSpotInputEnvelope
    set?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    disconnect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    delete?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    connect?: SubleaseAgreementWhereUniqueInput | SubleaseAgreementWhereUniqueInput[]
    update?: SubleaseAgreementUpdateWithWhereUniqueWithoutParkingSpotInput | SubleaseAgreementUpdateWithWhereUniqueWithoutParkingSpotInput[]
    updateMany?: SubleaseAgreementUpdateManyWithWhereWithoutParkingSpotInput | SubleaseAgreementUpdateManyWithWhereWithoutParkingSpotInput[]
    deleteMany?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
  }

  export type SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotNestedInput = {
    create?: XOR<SpotAvailabilityCreateWithoutParkingSpotInput, SpotAvailabilityUncheckedCreateWithoutParkingSpotInput> | SpotAvailabilityCreateWithoutParkingSpotInput[] | SpotAvailabilityUncheckedCreateWithoutParkingSpotInput[]
    connectOrCreate?: SpotAvailabilityCreateOrConnectWithoutParkingSpotInput | SpotAvailabilityCreateOrConnectWithoutParkingSpotInput[]
    upsert?: SpotAvailabilityUpsertWithWhereUniqueWithoutParkingSpotInput | SpotAvailabilityUpsertWithWhereUniqueWithoutParkingSpotInput[]
    createMany?: SpotAvailabilityCreateManyParkingSpotInputEnvelope
    set?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    disconnect?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    delete?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    connect?: SpotAvailabilityWhereUniqueInput | SpotAvailabilityWhereUniqueInput[]
    update?: SpotAvailabilityUpdateWithWhereUniqueWithoutParkingSpotInput | SpotAvailabilityUpdateWithWhereUniqueWithoutParkingSpotInput[]
    updateMany?: SpotAvailabilityUpdateManyWithWhereWithoutParkingSpotInput | SpotAvailabilityUpdateManyWithWhereWithoutParkingSpotInput[]
    deleteMany?: SpotAvailabilityScalarWhereInput | SpotAvailabilityScalarWhereInput[]
  }

  export type ParkingSpotCreateNestedOneWithoutReservationsInput = {
    create?: XOR<ParkingSpotCreateWithoutReservationsInput, ParkingSpotUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutReservationsInput
    connect?: ParkingSpotWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReservationsInput = {
    create?: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReservationsInput
    connect?: UserWhereUniqueInput
  }

  export type SpotAvailabilityCreateNestedOneWithoutReservationsInput = {
    create?: XOR<SpotAvailabilityCreateWithoutReservationsInput, SpotAvailabilityUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: SpotAvailabilityCreateOrConnectWithoutReservationsInput
    connect?: SpotAvailabilityWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumReservationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReservationStatus
  }

  export type ParkingSpotUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<ParkingSpotCreateWithoutReservationsInput, ParkingSpotUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutReservationsInput
    upsert?: ParkingSpotUpsertWithoutReservationsInput
    connect?: ParkingSpotWhereUniqueInput
    update?: XOR<XOR<ParkingSpotUpdateToOneWithWhereWithoutReservationsInput, ParkingSpotUpdateWithoutReservationsInput>, ParkingSpotUncheckedUpdateWithoutReservationsInput>
  }

  export type UserUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReservationsInput
    upsert?: UserUpsertWithoutReservationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReservationsInput, UserUpdateWithoutReservationsInput>, UserUncheckedUpdateWithoutReservationsInput>
  }

  export type SpotAvailabilityUpdateOneWithoutReservationsNestedInput = {
    create?: XOR<SpotAvailabilityCreateWithoutReservationsInput, SpotAvailabilityUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: SpotAvailabilityCreateOrConnectWithoutReservationsInput
    upsert?: SpotAvailabilityUpsertWithoutReservationsInput
    disconnect?: SpotAvailabilityWhereInput | boolean
    delete?: SpotAvailabilityWhereInput | boolean
    connect?: SpotAvailabilityWhereUniqueInput
    update?: XOR<XOR<SpotAvailabilityUpdateToOneWithWhereWithoutReservationsInput, SpotAvailabilityUpdateWithoutReservationsInput>, SpotAvailabilityUncheckedUpdateWithoutReservationsInput>
  }

  export type ParkingSpotCreateNestedOneWithoutAvailabilitiesInput = {
    create?: XOR<ParkingSpotCreateWithoutAvailabilitiesInput, ParkingSpotUncheckedCreateWithoutAvailabilitiesInput>
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutAvailabilitiesInput
    connect?: ParkingSpotWhereUniqueInput
  }

  export type ReservationCreateNestedManyWithoutSpotAvailabilityInput = {
    create?: XOR<ReservationCreateWithoutSpotAvailabilityInput, ReservationUncheckedCreateWithoutSpotAvailabilityInput> | ReservationCreateWithoutSpotAvailabilityInput[] | ReservationUncheckedCreateWithoutSpotAvailabilityInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutSpotAvailabilityInput | ReservationCreateOrConnectWithoutSpotAvailabilityInput[]
    createMany?: ReservationCreateManySpotAvailabilityInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ReservationUncheckedCreateNestedManyWithoutSpotAvailabilityInput = {
    create?: XOR<ReservationCreateWithoutSpotAvailabilityInput, ReservationUncheckedCreateWithoutSpotAvailabilityInput> | ReservationCreateWithoutSpotAvailabilityInput[] | ReservationUncheckedCreateWithoutSpotAvailabilityInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutSpotAvailabilityInput | ReservationCreateOrConnectWithoutSpotAvailabilityInput[]
    createMany?: ReservationCreateManySpotAvailabilityInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type EnumAvailabilityStatusFieldUpdateOperationsInput = {
    set?: $Enums.AvailabilityStatus
  }

  export type ParkingSpotUpdateOneRequiredWithoutAvailabilitiesNestedInput = {
    create?: XOR<ParkingSpotCreateWithoutAvailabilitiesInput, ParkingSpotUncheckedCreateWithoutAvailabilitiesInput>
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutAvailabilitiesInput
    upsert?: ParkingSpotUpsertWithoutAvailabilitiesInput
    connect?: ParkingSpotWhereUniqueInput
    update?: XOR<XOR<ParkingSpotUpdateToOneWithWhereWithoutAvailabilitiesInput, ParkingSpotUpdateWithoutAvailabilitiesInput>, ParkingSpotUncheckedUpdateWithoutAvailabilitiesInput>
  }

  export type ReservationUpdateManyWithoutSpotAvailabilityNestedInput = {
    create?: XOR<ReservationCreateWithoutSpotAvailabilityInput, ReservationUncheckedCreateWithoutSpotAvailabilityInput> | ReservationCreateWithoutSpotAvailabilityInput[] | ReservationUncheckedCreateWithoutSpotAvailabilityInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutSpotAvailabilityInput | ReservationCreateOrConnectWithoutSpotAvailabilityInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutSpotAvailabilityInput | ReservationUpsertWithWhereUniqueWithoutSpotAvailabilityInput[]
    createMany?: ReservationCreateManySpotAvailabilityInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutSpotAvailabilityInput | ReservationUpdateWithWhereUniqueWithoutSpotAvailabilityInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutSpotAvailabilityInput | ReservationUpdateManyWithWhereWithoutSpotAvailabilityInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ReservationUncheckedUpdateManyWithoutSpotAvailabilityNestedInput = {
    create?: XOR<ReservationCreateWithoutSpotAvailabilityInput, ReservationUncheckedCreateWithoutSpotAvailabilityInput> | ReservationCreateWithoutSpotAvailabilityInput[] | ReservationUncheckedCreateWithoutSpotAvailabilityInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutSpotAvailabilityInput | ReservationCreateOrConnectWithoutSpotAvailabilityInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutSpotAvailabilityInput | ReservationUpsertWithWhereUniqueWithoutSpotAvailabilityInput[]
    createMany?: ReservationCreateManySpotAvailabilityInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutSpotAvailabilityInput | ReservationUpdateWithWhereUniqueWithoutSpotAvailabilityInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutSpotAvailabilityInput | ReservationUpdateManyWithWhereWithoutSpotAvailabilityInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ParkingLotCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ParkingLotCreateWithoutReviewsInput, ParkingLotUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ParkingLotCreateOrConnectWithoutReviewsInput
    connect?: ParkingLotWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ParkingLotUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ParkingLotCreateWithoutReviewsInput, ParkingLotUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ParkingLotCreateOrConnectWithoutReviewsInput
    upsert?: ParkingLotUpsertWithoutReviewsInput
    connect?: ParkingLotWhereUniqueInput
    update?: XOR<XOR<ParkingLotUpdateToOneWithWhereWithoutReviewsInput, ParkingLotUpdateWithoutReviewsInput>, ParkingLotUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedMessagesInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedMessagesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedMessagesInput
    upsert?: UserUpsertWithoutReceivedMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedMessagesInput, UserUpdateWithoutReceivedMessagesInput>, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserCreateNestedOneWithoutOriginalLeasesInput = {
    create?: XOR<UserCreateWithoutOriginalLeasesInput, UserUncheckedCreateWithoutOriginalLeasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOriginalLeasesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubLeasesInput = {
    create?: XOR<UserCreateWithoutSubLeasesInput, UserUncheckedCreateWithoutSubLeasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubLeasesInput
    connect?: UserWhereUniqueInput
  }

  export type ParkingSpotCreateNestedOneWithoutSubleaseAgreementsInput = {
    create?: XOR<ParkingSpotCreateWithoutSubleaseAgreementsInput, ParkingSpotUncheckedCreateWithoutSubleaseAgreementsInput>
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutSubleaseAgreementsInput
    connect?: ParkingSpotWhereUniqueInput
  }

  export type EnumAgreementStatusFieldUpdateOperationsInput = {
    set?: $Enums.AgreementStatus
  }

  export type UserUpdateOneRequiredWithoutOriginalLeasesNestedInput = {
    create?: XOR<UserCreateWithoutOriginalLeasesInput, UserUncheckedCreateWithoutOriginalLeasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOriginalLeasesInput
    upsert?: UserUpsertWithoutOriginalLeasesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOriginalLeasesInput, UserUpdateWithoutOriginalLeasesInput>, UserUncheckedUpdateWithoutOriginalLeasesInput>
  }

  export type UserUpdateOneRequiredWithoutSubLeasesNestedInput = {
    create?: XOR<UserCreateWithoutSubLeasesInput, UserUncheckedCreateWithoutSubLeasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubLeasesInput
    upsert?: UserUpsertWithoutSubLeasesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubLeasesInput, UserUpdateWithoutSubLeasesInput>, UserUncheckedUpdateWithoutSubLeasesInput>
  }

  export type ParkingSpotUpdateOneRequiredWithoutSubleaseAgreementsNestedInput = {
    create?: XOR<ParkingSpotCreateWithoutSubleaseAgreementsInput, ParkingSpotUncheckedCreateWithoutSubleaseAgreementsInput>
    connectOrCreate?: ParkingSpotCreateOrConnectWithoutSubleaseAgreementsInput
    upsert?: ParkingSpotUpsertWithoutSubleaseAgreementsInput
    connect?: ParkingSpotWhereUniqueInput
    update?: XOR<XOR<ParkingSpotUpdateToOneWithWhereWithoutSubleaseAgreementsInput, ParkingSpotUpdateWithoutSubleaseAgreementsInput>, ParkingSpotUncheckedUpdateWithoutSubleaseAgreementsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumReservationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusFilter<$PrismaModel> | $Enums.ReservationStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumReservationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReservationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationStatusFilter<$PrismaModel>
    _max?: NestedEnumReservationStatusFilter<$PrismaModel>
  }

  export type NestedEnumAvailabilityStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AvailabilityStatus | EnumAvailabilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAvailabilityStatusFilter<$PrismaModel> | $Enums.AvailabilityStatus
  }

  export type NestedEnumAvailabilityStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AvailabilityStatus | EnumAvailabilityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AvailabilityStatus[] | ListEnumAvailabilityStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAvailabilityStatusWithAggregatesFilter<$PrismaModel> | $Enums.AvailabilityStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAvailabilityStatusFilter<$PrismaModel>
    _max?: NestedEnumAvailabilityStatusFilter<$PrismaModel>
  }

  export type NestedEnumAgreementStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusFilter<$PrismaModel> | $Enums.AgreementStatus
  }

  export type NestedEnumAgreementStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AgreementStatus | EnumAgreementStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AgreementStatus[] | ListEnumAgreementStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAgreementStatusWithAggregatesFilter<$PrismaModel> | $Enums.AgreementStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAgreementStatusFilter<$PrismaModel>
    _max?: NestedEnumAgreementStatusFilter<$PrismaModel>
  }

  export type ParkingLotCreateWithoutOwnerInput = {
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    parkingSpots?: ParkingSpotCreateNestedManyWithoutLotInput
    reviews?: ReviewCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotUncheckedCreateWithoutOwnerInput = {
    lot_id?: number
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    parkingSpots?: ParkingSpotUncheckedCreateNestedManyWithoutLotInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotCreateOrConnectWithoutOwnerInput = {
    where: ParkingLotWhereUniqueInput
    create: XOR<ParkingLotCreateWithoutOwnerInput, ParkingLotUncheckedCreateWithoutOwnerInput>
  }

  export type ParkingLotCreateManyOwnerInputEnvelope = {
    data: ParkingLotCreateManyOwnerInput | ParkingLotCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ReservationCreateWithoutUserInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    parkingSpot: ParkingSpotCreateNestedOneWithoutReservationsInput
    spotAvailability?: SpotAvailabilityCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutUserInput = {
    reservation_id?: number
    spot_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    availability_id?: number | null
  }

  export type ReservationCreateOrConnectWithoutUserInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutUserInput, ReservationUncheckedCreateWithoutUserInput>
  }

  export type ReservationCreateManyUserInputEnvelope = {
    data: ReservationCreateManyUserInput | ReservationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    message_text: string
    created_at?: Date | string
    receiver: UserCreateNestedOneWithoutReceivedMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    message_id?: number
    receiver_id: number
    message_text: string
    created_at?: Date | string
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverInput = {
    message_text: string
    created_at?: Date | string
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutReceiverInput = {
    message_id?: number
    sender_id: number
    message_text: string
    created_at?: Date | string
  }

  export type MessageCreateOrConnectWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateManyReceiverInputEnvelope = {
    data: MessageCreateManyReceiverInput | MessageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type SubleaseAgreementCreateWithoutOriginalLeaserInput = {
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
    subLeaser: UserCreateNestedOneWithoutSubLeasesInput
    parkingSpot: ParkingSpotCreateNestedOneWithoutSubleaseAgreementsInput
  }

  export type SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput = {
    agreement_id?: number
    subleaser_id: number
    spot_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SubleaseAgreementCreateOrConnectWithoutOriginalLeaserInput = {
    where: SubleaseAgreementWhereUniqueInput
    create: XOR<SubleaseAgreementCreateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput>
  }

  export type SubleaseAgreementCreateManyOriginalLeaserInputEnvelope = {
    data: SubleaseAgreementCreateManyOriginalLeaserInput | SubleaseAgreementCreateManyOriginalLeaserInput[]
    skipDuplicates?: boolean
  }

  export type SubleaseAgreementCreateWithoutSubLeaserInput = {
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
    originalLeaser: UserCreateNestedOneWithoutOriginalLeasesInput
    parkingSpot: ParkingSpotCreateNestedOneWithoutSubleaseAgreementsInput
  }

  export type SubleaseAgreementUncheckedCreateWithoutSubLeaserInput = {
    agreement_id?: number
    original_leaser_id: number
    spot_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SubleaseAgreementCreateOrConnectWithoutSubLeaserInput = {
    where: SubleaseAgreementWhereUniqueInput
    create: XOR<SubleaseAgreementCreateWithoutSubLeaserInput, SubleaseAgreementUncheckedCreateWithoutSubLeaserInput>
  }

  export type SubleaseAgreementCreateManySubLeaserInputEnvelope = {
    data: SubleaseAgreementCreateManySubLeaserInput | SubleaseAgreementCreateManySubLeaserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string
    parkingLot: ParkingLotCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    review_id?: number
    lot_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ParkingLotUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ParkingLotWhereUniqueInput
    update: XOR<ParkingLotUpdateWithoutOwnerInput, ParkingLotUncheckedUpdateWithoutOwnerInput>
    create: XOR<ParkingLotCreateWithoutOwnerInput, ParkingLotUncheckedCreateWithoutOwnerInput>
  }

  export type ParkingLotUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ParkingLotWhereUniqueInput
    data: XOR<ParkingLotUpdateWithoutOwnerInput, ParkingLotUncheckedUpdateWithoutOwnerInput>
  }

  export type ParkingLotUpdateManyWithWhereWithoutOwnerInput = {
    where: ParkingLotScalarWhereInput
    data: XOR<ParkingLotUpdateManyMutationInput, ParkingLotUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ParkingLotScalarWhereInput = {
    AND?: ParkingLotScalarWhereInput | ParkingLotScalarWhereInput[]
    OR?: ParkingLotScalarWhereInput[]
    NOT?: ParkingLotScalarWhereInput | ParkingLotScalarWhereInput[]
    lot_id?: IntFilter<"ParkingLot"> | number
    name?: StringFilter<"ParkingLot"> | string
    address?: StringFilter<"ParkingLot"> | string
    description?: StringNullableFilter<"ParkingLot"> | string | null
    latitude?: FloatFilter<"ParkingLot"> | number
    longitude?: FloatFilter<"ParkingLot"> | number
    total_spots?: IntFilter<"ParkingLot"> | number
    spot_numbering?: BoolFilter<"ParkingLot"> | boolean
    owner_id?: IntFilter<"ParkingLot"> | number
  }

  export type ReservationUpsertWithWhereUniqueWithoutUserInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutUserInput, ReservationUncheckedUpdateWithoutUserInput>
    create: XOR<ReservationCreateWithoutUserInput, ReservationUncheckedCreateWithoutUserInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutUserInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutUserInput, ReservationUncheckedUpdateWithoutUserInput>
  }

  export type ReservationUpdateManyWithWhereWithoutUserInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutUserInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    OR?: ReservationScalarWhereInput[]
    NOT?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    reservation_id?: IntFilter<"Reservation"> | number
    spot_id?: IntFilter<"Reservation"> | number
    user_id?: IntFilter<"Reservation"> | number
    start_time?: DateTimeFilter<"Reservation"> | Date | string
    end_time?: DateTimeFilter<"Reservation"> | Date | string
    status?: EnumReservationStatusFilter<"Reservation"> | $Enums.ReservationStatus
    availability_id?: IntNullableFilter<"Reservation"> | number | null
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    message_id?: IntFilter<"Message"> | number
    sender_id?: IntFilter<"Message"> | number
    receiver_id?: IntFilter<"Message"> | number
    message_text?: StringFilter<"Message"> | string
    created_at?: DateTimeFilter<"Message"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type SubleaseAgreementUpsertWithWhereUniqueWithoutOriginalLeaserInput = {
    where: SubleaseAgreementWhereUniqueInput
    update: XOR<SubleaseAgreementUpdateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedUpdateWithoutOriginalLeaserInput>
    create: XOR<SubleaseAgreementCreateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedCreateWithoutOriginalLeaserInput>
  }

  export type SubleaseAgreementUpdateWithWhereUniqueWithoutOriginalLeaserInput = {
    where: SubleaseAgreementWhereUniqueInput
    data: XOR<SubleaseAgreementUpdateWithoutOriginalLeaserInput, SubleaseAgreementUncheckedUpdateWithoutOriginalLeaserInput>
  }

  export type SubleaseAgreementUpdateManyWithWhereWithoutOriginalLeaserInput = {
    where: SubleaseAgreementScalarWhereInput
    data: XOR<SubleaseAgreementUpdateManyMutationInput, SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserInput>
  }

  export type SubleaseAgreementScalarWhereInput = {
    AND?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
    OR?: SubleaseAgreementScalarWhereInput[]
    NOT?: SubleaseAgreementScalarWhereInput | SubleaseAgreementScalarWhereInput[]
    agreement_id?: IntFilter<"SubleaseAgreement"> | number
    original_leaser_id?: IntFilter<"SubleaseAgreement"> | number
    subleaser_id?: IntFilter<"SubleaseAgreement"> | number
    spot_id?: IntFilter<"SubleaseAgreement"> | number
    start_date?: DateTimeFilter<"SubleaseAgreement"> | Date | string
    end_date?: DateTimeFilter<"SubleaseAgreement"> | Date | string
    status?: EnumAgreementStatusFilter<"SubleaseAgreement"> | $Enums.AgreementStatus
  }

  export type SubleaseAgreementUpsertWithWhereUniqueWithoutSubLeaserInput = {
    where: SubleaseAgreementWhereUniqueInput
    update: XOR<SubleaseAgreementUpdateWithoutSubLeaserInput, SubleaseAgreementUncheckedUpdateWithoutSubLeaserInput>
    create: XOR<SubleaseAgreementCreateWithoutSubLeaserInput, SubleaseAgreementUncheckedCreateWithoutSubLeaserInput>
  }

  export type SubleaseAgreementUpdateWithWhereUniqueWithoutSubLeaserInput = {
    where: SubleaseAgreementWhereUniqueInput
    data: XOR<SubleaseAgreementUpdateWithoutSubLeaserInput, SubleaseAgreementUncheckedUpdateWithoutSubLeaserInput>
  }

  export type SubleaseAgreementUpdateManyWithWhereWithoutSubLeaserInput = {
    where: SubleaseAgreementScalarWhereInput
    data: XOR<SubleaseAgreementUpdateManyMutationInput, SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    review_id?: IntFilter<"Review"> | number
    lot_id?: IntFilter<"Review"> | number
    user_id?: IntFilter<"Review"> | number
    rating?: IntFilter<"Review"> | number
    comment?: StringNullableFilter<"Review"> | string | null
    created_at?: DateTimeFilter<"Review"> | Date | string
  }

  export type UserCreateWithoutOwnedLotsInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    reservations?: ReservationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedLotsInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedLotsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedLotsInput, UserUncheckedCreateWithoutOwnedLotsInput>
  }

  export type ParkingSpotCreateWithoutLotInput = {
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    reservations?: ReservationCreateNestedManyWithoutParkingSpotInput
    subleaseAgreements?: SubleaseAgreementCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotUncheckedCreateWithoutLotInput = {
    spot_id?: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    reservations?: ReservationUncheckedCreateNestedManyWithoutParkingSpotInput
    subleaseAgreements?: SubleaseAgreementUncheckedCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityUncheckedCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotCreateOrConnectWithoutLotInput = {
    where: ParkingSpotWhereUniqueInput
    create: XOR<ParkingSpotCreateWithoutLotInput, ParkingSpotUncheckedCreateWithoutLotInput>
  }

  export type ParkingSpotCreateManyLotInputEnvelope = {
    data: ParkingSpotCreateManyLotInput | ParkingSpotCreateManyLotInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutParkingLotInput = {
    rating: number
    comment?: string | null
    created_at?: Date | string
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutParkingLotInput = {
    review_id?: number
    user_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ReviewCreateOrConnectWithoutParkingLotInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutParkingLotInput, ReviewUncheckedCreateWithoutParkingLotInput>
  }

  export type ReviewCreateManyParkingLotInputEnvelope = {
    data: ReviewCreateManyParkingLotInput | ReviewCreateManyParkingLotInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOwnedLotsInput = {
    update: XOR<UserUpdateWithoutOwnedLotsInput, UserUncheckedUpdateWithoutOwnedLotsInput>
    create: XOR<UserCreateWithoutOwnedLotsInput, UserUncheckedCreateWithoutOwnedLotsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedLotsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedLotsInput, UserUncheckedUpdateWithoutOwnedLotsInput>
  }

  export type UserUpdateWithoutOwnedLotsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedLotsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ParkingSpotUpsertWithWhereUniqueWithoutLotInput = {
    where: ParkingSpotWhereUniqueInput
    update: XOR<ParkingSpotUpdateWithoutLotInput, ParkingSpotUncheckedUpdateWithoutLotInput>
    create: XOR<ParkingSpotCreateWithoutLotInput, ParkingSpotUncheckedCreateWithoutLotInput>
  }

  export type ParkingSpotUpdateWithWhereUniqueWithoutLotInput = {
    where: ParkingSpotWhereUniqueInput
    data: XOR<ParkingSpotUpdateWithoutLotInput, ParkingSpotUncheckedUpdateWithoutLotInput>
  }

  export type ParkingSpotUpdateManyWithWhereWithoutLotInput = {
    where: ParkingSpotScalarWhereInput
    data: XOR<ParkingSpotUpdateManyMutationInput, ParkingSpotUncheckedUpdateManyWithoutLotInput>
  }

  export type ParkingSpotScalarWhereInput = {
    AND?: ParkingSpotScalarWhereInput | ParkingSpotScalarWhereInput[]
    OR?: ParkingSpotScalarWhereInput[]
    NOT?: ParkingSpotScalarWhereInput | ParkingSpotScalarWhereInput[]
    spot_id?: IntFilter<"ParkingSpot"> | number
    lot_id?: IntFilter<"ParkingSpot"> | number
    spot_number?: IntNullableFilter<"ParkingSpot"> | number | null
    reservable?: BoolFilter<"ParkingSpot"> | boolean
    description?: StringNullableFilter<"ParkingSpot"> | string | null
    price?: FloatFilter<"ParkingSpot"> | number
    is_reserved?: BoolFilter<"ParkingSpot"> | boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutParkingLotInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutParkingLotInput, ReviewUncheckedUpdateWithoutParkingLotInput>
    create: XOR<ReviewCreateWithoutParkingLotInput, ReviewUncheckedCreateWithoutParkingLotInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutParkingLotInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutParkingLotInput, ReviewUncheckedUpdateWithoutParkingLotInput>
  }

  export type ReviewUpdateManyWithWhereWithoutParkingLotInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutParkingLotInput>
  }

  export type ParkingLotCreateWithoutParkingSpotsInput = {
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner: UserCreateNestedOneWithoutOwnedLotsInput
    reviews?: ReviewCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotUncheckedCreateWithoutParkingSpotsInput = {
    lot_id?: number
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner_id: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotCreateOrConnectWithoutParkingSpotsInput = {
    where: ParkingLotWhereUniqueInput
    create: XOR<ParkingLotCreateWithoutParkingSpotsInput, ParkingLotUncheckedCreateWithoutParkingSpotsInput>
  }

  export type ReservationCreateWithoutParkingSpotInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    user: UserCreateNestedOneWithoutReservationsInput
    spotAvailability?: SpotAvailabilityCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutParkingSpotInput = {
    reservation_id?: number
    user_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    availability_id?: number | null
  }

  export type ReservationCreateOrConnectWithoutParkingSpotInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutParkingSpotInput, ReservationUncheckedCreateWithoutParkingSpotInput>
  }

  export type ReservationCreateManyParkingSpotInputEnvelope = {
    data: ReservationCreateManyParkingSpotInput | ReservationCreateManyParkingSpotInput[]
    skipDuplicates?: boolean
  }

  export type SubleaseAgreementCreateWithoutParkingSpotInput = {
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
    originalLeaser: UserCreateNestedOneWithoutOriginalLeasesInput
    subLeaser: UserCreateNestedOneWithoutSubLeasesInput
  }

  export type SubleaseAgreementUncheckedCreateWithoutParkingSpotInput = {
    agreement_id?: number
    original_leaser_id: number
    subleaser_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SubleaseAgreementCreateOrConnectWithoutParkingSpotInput = {
    where: SubleaseAgreementWhereUniqueInput
    create: XOR<SubleaseAgreementCreateWithoutParkingSpotInput, SubleaseAgreementUncheckedCreateWithoutParkingSpotInput>
  }

  export type SubleaseAgreementCreateManyParkingSpotInputEnvelope = {
    data: SubleaseAgreementCreateManyParkingSpotInput | SubleaseAgreementCreateManyParkingSpotInput[]
    skipDuplicates?: boolean
  }

  export type SpotAvailabilityCreateWithoutParkingSpotInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
    reservations?: ReservationCreateNestedManyWithoutSpotAvailabilityInput
  }

  export type SpotAvailabilityUncheckedCreateWithoutParkingSpotInput = {
    availability_id?: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
    reservations?: ReservationUncheckedCreateNestedManyWithoutSpotAvailabilityInput
  }

  export type SpotAvailabilityCreateOrConnectWithoutParkingSpotInput = {
    where: SpotAvailabilityWhereUniqueInput
    create: XOR<SpotAvailabilityCreateWithoutParkingSpotInput, SpotAvailabilityUncheckedCreateWithoutParkingSpotInput>
  }

  export type SpotAvailabilityCreateManyParkingSpotInputEnvelope = {
    data: SpotAvailabilityCreateManyParkingSpotInput | SpotAvailabilityCreateManyParkingSpotInput[]
    skipDuplicates?: boolean
  }

  export type ParkingLotUpsertWithoutParkingSpotsInput = {
    update: XOR<ParkingLotUpdateWithoutParkingSpotsInput, ParkingLotUncheckedUpdateWithoutParkingSpotsInput>
    create: XOR<ParkingLotCreateWithoutParkingSpotsInput, ParkingLotUncheckedCreateWithoutParkingSpotsInput>
    where?: ParkingLotWhereInput
  }

  export type ParkingLotUpdateToOneWithWhereWithoutParkingSpotsInput = {
    where?: ParkingLotWhereInput
    data: XOR<ParkingLotUpdateWithoutParkingSpotsInput, ParkingLotUncheckedUpdateWithoutParkingSpotsInput>
  }

  export type ParkingLotUpdateWithoutParkingSpotsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutOwnedLotsNestedInput
    reviews?: ReviewUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotUncheckedUpdateWithoutParkingSpotsInput = {
    lot_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner_id?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutParkingLotNestedInput
  }

  export type ReservationUpsertWithWhereUniqueWithoutParkingSpotInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutParkingSpotInput, ReservationUncheckedUpdateWithoutParkingSpotInput>
    create: XOR<ReservationCreateWithoutParkingSpotInput, ReservationUncheckedCreateWithoutParkingSpotInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutParkingSpotInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutParkingSpotInput, ReservationUncheckedUpdateWithoutParkingSpotInput>
  }

  export type ReservationUpdateManyWithWhereWithoutParkingSpotInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutParkingSpotInput>
  }

  export type SubleaseAgreementUpsertWithWhereUniqueWithoutParkingSpotInput = {
    where: SubleaseAgreementWhereUniqueInput
    update: XOR<SubleaseAgreementUpdateWithoutParkingSpotInput, SubleaseAgreementUncheckedUpdateWithoutParkingSpotInput>
    create: XOR<SubleaseAgreementCreateWithoutParkingSpotInput, SubleaseAgreementUncheckedCreateWithoutParkingSpotInput>
  }

  export type SubleaseAgreementUpdateWithWhereUniqueWithoutParkingSpotInput = {
    where: SubleaseAgreementWhereUniqueInput
    data: XOR<SubleaseAgreementUpdateWithoutParkingSpotInput, SubleaseAgreementUncheckedUpdateWithoutParkingSpotInput>
  }

  export type SubleaseAgreementUpdateManyWithWhereWithoutParkingSpotInput = {
    where: SubleaseAgreementScalarWhereInput
    data: XOR<SubleaseAgreementUpdateManyMutationInput, SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotInput>
  }

  export type SpotAvailabilityUpsertWithWhereUniqueWithoutParkingSpotInput = {
    where: SpotAvailabilityWhereUniqueInput
    update: XOR<SpotAvailabilityUpdateWithoutParkingSpotInput, SpotAvailabilityUncheckedUpdateWithoutParkingSpotInput>
    create: XOR<SpotAvailabilityCreateWithoutParkingSpotInput, SpotAvailabilityUncheckedCreateWithoutParkingSpotInput>
  }

  export type SpotAvailabilityUpdateWithWhereUniqueWithoutParkingSpotInput = {
    where: SpotAvailabilityWhereUniqueInput
    data: XOR<SpotAvailabilityUpdateWithoutParkingSpotInput, SpotAvailabilityUncheckedUpdateWithoutParkingSpotInput>
  }

  export type SpotAvailabilityUpdateManyWithWhereWithoutParkingSpotInput = {
    where: SpotAvailabilityScalarWhereInput
    data: XOR<SpotAvailabilityUpdateManyMutationInput, SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotInput>
  }

  export type SpotAvailabilityScalarWhereInput = {
    AND?: SpotAvailabilityScalarWhereInput | SpotAvailabilityScalarWhereInput[]
    OR?: SpotAvailabilityScalarWhereInput[]
    NOT?: SpotAvailabilityScalarWhereInput | SpotAvailabilityScalarWhereInput[]
    availability_id?: IntFilter<"SpotAvailability"> | number
    spot_id?: IntFilter<"SpotAvailability"> | number
    start_time?: DateTimeFilter<"SpotAvailability"> | Date | string
    end_time?: DateTimeFilter<"SpotAvailability"> | Date | string
    status?: EnumAvailabilityStatusFilter<"SpotAvailability"> | $Enums.AvailabilityStatus
  }

  export type ParkingSpotCreateWithoutReservationsInput = {
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    lot: ParkingLotCreateNestedOneWithoutParkingSpotsInput
    subleaseAgreements?: SubleaseAgreementCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotUncheckedCreateWithoutReservationsInput = {
    spot_id?: number
    lot_id: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    subleaseAgreements?: SubleaseAgreementUncheckedCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityUncheckedCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotCreateOrConnectWithoutReservationsInput = {
    where: ParkingSpotWhereUniqueInput
    create: XOR<ParkingSpotCreateWithoutReservationsInput, ParkingSpotUncheckedCreateWithoutReservationsInput>
  }

  export type UserCreateWithoutReservationsInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReservationsInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReservationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
  }

  export type SpotAvailabilityCreateWithoutReservationsInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
    parkingSpot: ParkingSpotCreateNestedOneWithoutAvailabilitiesInput
  }

  export type SpotAvailabilityUncheckedCreateWithoutReservationsInput = {
    availability_id?: number
    spot_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
  }

  export type SpotAvailabilityCreateOrConnectWithoutReservationsInput = {
    where: SpotAvailabilityWhereUniqueInput
    create: XOR<SpotAvailabilityCreateWithoutReservationsInput, SpotAvailabilityUncheckedCreateWithoutReservationsInput>
  }

  export type ParkingSpotUpsertWithoutReservationsInput = {
    update: XOR<ParkingSpotUpdateWithoutReservationsInput, ParkingSpotUncheckedUpdateWithoutReservationsInput>
    create: XOR<ParkingSpotCreateWithoutReservationsInput, ParkingSpotUncheckedCreateWithoutReservationsInput>
    where?: ParkingSpotWhereInput
  }

  export type ParkingSpotUpdateToOneWithWhereWithoutReservationsInput = {
    where?: ParkingSpotWhereInput
    data: XOR<ParkingSpotUpdateWithoutReservationsInput, ParkingSpotUncheckedUpdateWithoutReservationsInput>
  }

  export type ParkingSpotUpdateWithoutReservationsInput = {
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    lot?: ParkingLotUpdateOneRequiredWithoutParkingSpotsNestedInput
    subleaseAgreements?: SubleaseAgreementUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotUncheckedUpdateWithoutReservationsInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    subleaseAgreements?: SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotNestedInput
  }

  export type UserUpsertWithoutReservationsInput = {
    update: XOR<UserUpdateWithoutReservationsInput, UserUncheckedUpdateWithoutReservationsInput>
    create: XOR<UserCreateWithoutReservationsInput, UserUncheckedCreateWithoutReservationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReservationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReservationsInput, UserUncheckedUpdateWithoutReservationsInput>
  }

  export type UserUpdateWithoutReservationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReservationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SpotAvailabilityUpsertWithoutReservationsInput = {
    update: XOR<SpotAvailabilityUpdateWithoutReservationsInput, SpotAvailabilityUncheckedUpdateWithoutReservationsInput>
    create: XOR<SpotAvailabilityCreateWithoutReservationsInput, SpotAvailabilityUncheckedCreateWithoutReservationsInput>
    where?: SpotAvailabilityWhereInput
  }

  export type SpotAvailabilityUpdateToOneWithWhereWithoutReservationsInput = {
    where?: SpotAvailabilityWhereInput
    data: XOR<SpotAvailabilityUpdateWithoutReservationsInput, SpotAvailabilityUncheckedUpdateWithoutReservationsInput>
  }

  export type SpotAvailabilityUpdateWithoutReservationsInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutAvailabilitiesNestedInput
  }

  export type SpotAvailabilityUncheckedUpdateWithoutReservationsInput = {
    availability_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
  }

  export type ParkingSpotCreateWithoutAvailabilitiesInput = {
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    lot: ParkingLotCreateNestedOneWithoutParkingSpotsInput
    reservations?: ReservationCreateNestedManyWithoutParkingSpotInput
    subleaseAgreements?: SubleaseAgreementCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotUncheckedCreateWithoutAvailabilitiesInput = {
    spot_id?: number
    lot_id: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    reservations?: ReservationUncheckedCreateNestedManyWithoutParkingSpotInput
    subleaseAgreements?: SubleaseAgreementUncheckedCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotCreateOrConnectWithoutAvailabilitiesInput = {
    where: ParkingSpotWhereUniqueInput
    create: XOR<ParkingSpotCreateWithoutAvailabilitiesInput, ParkingSpotUncheckedCreateWithoutAvailabilitiesInput>
  }

  export type ReservationCreateWithoutSpotAvailabilityInput = {
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    parkingSpot: ParkingSpotCreateNestedOneWithoutReservationsInput
    user: UserCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutSpotAvailabilityInput = {
    reservation_id?: number
    spot_id: number
    user_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
  }

  export type ReservationCreateOrConnectWithoutSpotAvailabilityInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutSpotAvailabilityInput, ReservationUncheckedCreateWithoutSpotAvailabilityInput>
  }

  export type ReservationCreateManySpotAvailabilityInputEnvelope = {
    data: ReservationCreateManySpotAvailabilityInput | ReservationCreateManySpotAvailabilityInput[]
    skipDuplicates?: boolean
  }

  export type ParkingSpotUpsertWithoutAvailabilitiesInput = {
    update: XOR<ParkingSpotUpdateWithoutAvailabilitiesInput, ParkingSpotUncheckedUpdateWithoutAvailabilitiesInput>
    create: XOR<ParkingSpotCreateWithoutAvailabilitiesInput, ParkingSpotUncheckedCreateWithoutAvailabilitiesInput>
    where?: ParkingSpotWhereInput
  }

  export type ParkingSpotUpdateToOneWithWhereWithoutAvailabilitiesInput = {
    where?: ParkingSpotWhereInput
    data: XOR<ParkingSpotUpdateWithoutAvailabilitiesInput, ParkingSpotUncheckedUpdateWithoutAvailabilitiesInput>
  }

  export type ParkingSpotUpdateWithoutAvailabilitiesInput = {
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    lot?: ParkingLotUpdateOneRequiredWithoutParkingSpotsNestedInput
    reservations?: ReservationUpdateManyWithoutParkingSpotNestedInput
    subleaseAgreements?: SubleaseAgreementUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotUncheckedUpdateWithoutAvailabilitiesInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    reservations?: ReservationUncheckedUpdateManyWithoutParkingSpotNestedInput
    subleaseAgreements?: SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotNestedInput
  }

  export type ReservationUpsertWithWhereUniqueWithoutSpotAvailabilityInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutSpotAvailabilityInput, ReservationUncheckedUpdateWithoutSpotAvailabilityInput>
    create: XOR<ReservationCreateWithoutSpotAvailabilityInput, ReservationUncheckedCreateWithoutSpotAvailabilityInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutSpotAvailabilityInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutSpotAvailabilityInput, ReservationUncheckedUpdateWithoutSpotAvailabilityInput>
  }

  export type ReservationUpdateManyWithWhereWithoutSpotAvailabilityInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutSpotAvailabilityInput>
  }

  export type ParkingLotCreateWithoutReviewsInput = {
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner: UserCreateNestedOneWithoutOwnedLotsInput
    parkingSpots?: ParkingSpotCreateNestedManyWithoutLotInput
  }

  export type ParkingLotUncheckedCreateWithoutReviewsInput = {
    lot_id?: number
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
    owner_id: number
    parkingSpots?: ParkingSpotUncheckedCreateNestedManyWithoutLotInput
  }

  export type ParkingLotCreateOrConnectWithoutReviewsInput = {
    where: ParkingLotWhereUniqueInput
    create: XOR<ParkingLotCreateWithoutReviewsInput, ParkingLotUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    reservations?: ReservationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type ParkingLotUpsertWithoutReviewsInput = {
    update: XOR<ParkingLotUpdateWithoutReviewsInput, ParkingLotUncheckedUpdateWithoutReviewsInput>
    create: XOR<ParkingLotCreateWithoutReviewsInput, ParkingLotUncheckedCreateWithoutReviewsInput>
    where?: ParkingLotWhereInput
  }

  export type ParkingLotUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ParkingLotWhereInput
    data: XOR<ParkingLotUpdateWithoutReviewsInput, ParkingLotUncheckedUpdateWithoutReviewsInput>
  }

  export type ParkingLotUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutOwnedLotsNestedInput
    parkingSpots?: ParkingSpotUpdateManyWithoutLotNestedInput
  }

  export type ParkingLotUncheckedUpdateWithoutReviewsInput = {
    lot_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    owner_id?: IntFieldUpdateOperationsInput | number
    parkingSpots?: ParkingSpotUncheckedUpdateManyWithoutLotNestedInput
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
  }

  export type UserCreateWithoutSentMessagesInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    reservations?: ReservationCreateNestedManyWithoutUserInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type UserCreateWithoutReceivedMessagesInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    reservations?: ReservationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedMessagesInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedMessagesInput = {
    update: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
    create: XOR<UserCreateWithoutReceivedMessagesInput, UserUncheckedCreateWithoutReceivedMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedMessagesInput, UserUncheckedUpdateWithoutReceivedMessagesInput>
  }

  export type UserUpdateWithoutReceivedMessagesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedMessagesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOriginalLeasesInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    reservations?: ReservationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    subLeases?: SubleaseAgreementCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOriginalLeasesInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    subLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutSubLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOriginalLeasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOriginalLeasesInput, UserUncheckedCreateWithoutOriginalLeasesInput>
  }

  export type UserCreateWithoutSubLeasesInput = {
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotCreateNestedManyWithoutOwnerInput
    reservations?: ReservationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementCreateNestedManyWithoutOriginalLeaserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubLeasesInput = {
    user_id?: number
    username: string
    email: string
    password_hash: string
    profile_picture?: string | null
    user_type: $Enums.UserType
    ownedLots?: ParkingLotUncheckedCreateNestedManyWithoutOwnerInput
    reservations?: ReservationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    receivedMessages?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    originalLeases?: SubleaseAgreementUncheckedCreateNestedManyWithoutOriginalLeaserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubLeasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubLeasesInput, UserUncheckedCreateWithoutSubLeasesInput>
  }

  export type ParkingSpotCreateWithoutSubleaseAgreementsInput = {
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    lot: ParkingLotCreateNestedOneWithoutParkingSpotsInput
    reservations?: ReservationCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotUncheckedCreateWithoutSubleaseAgreementsInput = {
    spot_id?: number
    lot_id: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
    reservations?: ReservationUncheckedCreateNestedManyWithoutParkingSpotInput
    availabilities?: SpotAvailabilityUncheckedCreateNestedManyWithoutParkingSpotInput
  }

  export type ParkingSpotCreateOrConnectWithoutSubleaseAgreementsInput = {
    where: ParkingSpotWhereUniqueInput
    create: XOR<ParkingSpotCreateWithoutSubleaseAgreementsInput, ParkingSpotUncheckedCreateWithoutSubleaseAgreementsInput>
  }

  export type UserUpsertWithoutOriginalLeasesInput = {
    update: XOR<UserUpdateWithoutOriginalLeasesInput, UserUncheckedUpdateWithoutOriginalLeasesInput>
    create: XOR<UserCreateWithoutOriginalLeasesInput, UserUncheckedCreateWithoutOriginalLeasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOriginalLeasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOriginalLeasesInput, UserUncheckedUpdateWithoutOriginalLeasesInput>
  }

  export type UserUpdateWithoutOriginalLeasesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    subLeases?: SubleaseAgreementUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOriginalLeasesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    subLeases?: SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutSubLeasesInput = {
    update: XOR<UserUpdateWithoutSubLeasesInput, UserUncheckedUpdateWithoutSubLeasesInput>
    create: XOR<UserCreateWithoutSubLeasesInput, UserUncheckedCreateWithoutSubLeasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubLeasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubLeasesInput, UserUncheckedUpdateWithoutSubLeasesInput>
  }

  export type UserUpdateWithoutSubLeasesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUpdateManyWithoutOriginalLeaserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubLeasesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    profile_picture?: NullableStringFieldUpdateOperationsInput | string | null
    user_type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    ownedLots?: ParkingLotUncheckedUpdateManyWithoutOwnerNestedInput
    reservations?: ReservationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    receivedMessages?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    originalLeases?: SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ParkingSpotUpsertWithoutSubleaseAgreementsInput = {
    update: XOR<ParkingSpotUpdateWithoutSubleaseAgreementsInput, ParkingSpotUncheckedUpdateWithoutSubleaseAgreementsInput>
    create: XOR<ParkingSpotCreateWithoutSubleaseAgreementsInput, ParkingSpotUncheckedCreateWithoutSubleaseAgreementsInput>
    where?: ParkingSpotWhereInput
  }

  export type ParkingSpotUpdateToOneWithWhereWithoutSubleaseAgreementsInput = {
    where?: ParkingSpotWhereInput
    data: XOR<ParkingSpotUpdateWithoutSubleaseAgreementsInput, ParkingSpotUncheckedUpdateWithoutSubleaseAgreementsInput>
  }

  export type ParkingSpotUpdateWithoutSubleaseAgreementsInput = {
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    lot?: ParkingLotUpdateOneRequiredWithoutParkingSpotsNestedInput
    reservations?: ReservationUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotUncheckedUpdateWithoutSubleaseAgreementsInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    reservations?: ReservationUncheckedUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingLotCreateManyOwnerInput = {
    lot_id?: number
    name: string
    address: string
    description?: string | null
    latitude: number
    longitude: number
    total_spots: number
    spot_numbering: boolean
  }

  export type ReservationCreateManyUserInput = {
    reservation_id?: number
    spot_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    availability_id?: number | null
  }

  export type MessageCreateManySenderInput = {
    message_id?: number
    receiver_id: number
    message_text: string
    created_at?: Date | string
  }

  export type MessageCreateManyReceiverInput = {
    message_id?: number
    sender_id: number
    message_text: string
    created_at?: Date | string
  }

  export type SubleaseAgreementCreateManyOriginalLeaserInput = {
    agreement_id?: number
    subleaser_id: number
    spot_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SubleaseAgreementCreateManySubLeaserInput = {
    agreement_id?: number
    original_leaser_id: number
    spot_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type ReviewCreateManyUserInput = {
    review_id?: number
    lot_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ParkingLotUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    parkingSpots?: ParkingSpotUpdateManyWithoutLotNestedInput
    reviews?: ReviewUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotUncheckedUpdateWithoutOwnerInput = {
    lot_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
    parkingSpots?: ParkingSpotUncheckedUpdateManyWithoutLotNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotUncheckedUpdateManyWithoutOwnerInput = {
    lot_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    total_spots?: IntFieldUpdateOperationsInput | number
    spot_numbering?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReservationUpdateWithoutUserInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutReservationsNestedInput
    spotAvailability?: SpotAvailabilityUpdateOneWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutUserInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    availability_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReservationUncheckedUpdateManyWithoutUserInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    availability_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUpdateWithoutSenderInput = {
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    receiver?: UserUpdateOneRequiredWithoutReceivedMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    receiver_id?: IntFieldUpdateOperationsInput | number
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    receiver_id?: IntFieldUpdateOperationsInput | number
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutReceiverInput = {
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    sender_id?: IntFieldUpdateOperationsInput | number
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutReceiverInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    sender_id?: IntFieldUpdateOperationsInput | number
    message_text?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubleaseAgreementUpdateWithoutOriginalLeaserInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    subLeaser?: UserUpdateOneRequiredWithoutSubLeasesNestedInput
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutSubleaseAgreementsNestedInput
  }

  export type SubleaseAgreementUncheckedUpdateWithoutOriginalLeaserInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    subleaser_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SubleaseAgreementUncheckedUpdateManyWithoutOriginalLeaserInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    subleaser_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SubleaseAgreementUpdateWithoutSubLeaserInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    originalLeaser?: UserUpdateOneRequiredWithoutOriginalLeasesNestedInput
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutSubleaseAgreementsNestedInput
  }

  export type SubleaseAgreementUncheckedUpdateWithoutSubLeaserInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    original_leaser_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SubleaseAgreementUncheckedUpdateManyWithoutSubLeaserInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    original_leaser_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type ReviewUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    parkingLot?: ParkingLotUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    lot_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParkingSpotCreateManyLotInput = {
    spot_id?: number
    spot_number?: number | null
    reservable: boolean
    description?: string | null
    price: number
    is_reserved?: boolean
  }

  export type ReviewCreateManyParkingLotInput = {
    review_id?: number
    user_id: number
    rating: number
    comment?: string | null
    created_at?: Date | string
  }

  export type ParkingSpotUpdateWithoutLotInput = {
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    reservations?: ReservationUpdateManyWithoutParkingSpotNestedInput
    subleaseAgreements?: SubleaseAgreementUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotUncheckedUpdateWithoutLotInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
    reservations?: ReservationUncheckedUpdateManyWithoutParkingSpotNestedInput
    subleaseAgreements?: SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotNestedInput
    availabilities?: SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotNestedInput
  }

  export type ParkingSpotUncheckedUpdateManyWithoutLotInput = {
    spot_id?: IntFieldUpdateOperationsInput | number
    spot_number?: NullableIntFieldUpdateOperationsInput | number | null
    reservable?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    is_reserved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewUpdateWithoutParkingLotInput = {
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutParkingLotInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutParkingLotInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationCreateManyParkingSpotInput = {
    reservation_id?: number
    user_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
    availability_id?: number | null
  }

  export type SubleaseAgreementCreateManyParkingSpotInput = {
    agreement_id?: number
    original_leaser_id: number
    subleaser_id: number
    start_date: Date | string
    end_date: Date | string
    status: $Enums.AgreementStatus
  }

  export type SpotAvailabilityCreateManyParkingSpotInput = {
    availability_id?: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.AvailabilityStatus
  }

  export type ReservationUpdateWithoutParkingSpotInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    user?: UserUpdateOneRequiredWithoutReservationsNestedInput
    spotAvailability?: SpotAvailabilityUpdateOneWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutParkingSpotInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    availability_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReservationUncheckedUpdateManyWithoutParkingSpotInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    availability_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubleaseAgreementUpdateWithoutParkingSpotInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
    originalLeaser?: UserUpdateOneRequiredWithoutOriginalLeasesNestedInput
    subLeaser?: UserUpdateOneRequiredWithoutSubLeasesNestedInput
  }

  export type SubleaseAgreementUncheckedUpdateWithoutParkingSpotInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    original_leaser_id?: IntFieldUpdateOperationsInput | number
    subleaser_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SubleaseAgreementUncheckedUpdateManyWithoutParkingSpotInput = {
    agreement_id?: IntFieldUpdateOperationsInput | number
    original_leaser_id?: IntFieldUpdateOperationsInput | number
    subleaser_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAgreementStatusFieldUpdateOperationsInput | $Enums.AgreementStatus
  }

  export type SpotAvailabilityUpdateWithoutParkingSpotInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
    reservations?: ReservationUpdateManyWithoutSpotAvailabilityNestedInput
  }

  export type SpotAvailabilityUncheckedUpdateWithoutParkingSpotInput = {
    availability_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
    reservations?: ReservationUncheckedUpdateManyWithoutSpotAvailabilityNestedInput
  }

  export type SpotAvailabilityUncheckedUpdateManyWithoutParkingSpotInput = {
    availability_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAvailabilityStatusFieldUpdateOperationsInput | $Enums.AvailabilityStatus
  }

  export type ReservationCreateManySpotAvailabilityInput = {
    reservation_id?: number
    spot_id: number
    user_id: number
    start_time: Date | string
    end_time: Date | string
    status: $Enums.ReservationStatus
  }

  export type ReservationUpdateWithoutSpotAvailabilityInput = {
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    parkingSpot?: ParkingSpotUpdateOneRequiredWithoutReservationsNestedInput
    user?: UserUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutSpotAvailabilityInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
  }

  export type ReservationUncheckedUpdateManyWithoutSpotAvailabilityInput = {
    reservation_id?: IntFieldUpdateOperationsInput | number
    spot_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParkingLotCountOutputTypeDefaultArgs instead
     */
    export type ParkingLotCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingLotCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParkingSpotCountOutputTypeDefaultArgs instead
     */
    export type ParkingSpotCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingSpotCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpotAvailabilityCountOutputTypeDefaultArgs instead
     */
    export type SpotAvailabilityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpotAvailabilityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParkingLotDefaultArgs instead
     */
    export type ParkingLotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingLotDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParkingSpotDefaultArgs instead
     */
    export type ParkingSpotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingSpotDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationDefaultArgs instead
     */
    export type ReservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpotAvailabilityDefaultArgs instead
     */
    export type SpotAvailabilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SpotAvailabilityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReviewDefaultArgs instead
     */
    export type ReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReviewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubleaseAgreementDefaultArgs instead
     */
    export type SubleaseAgreementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubleaseAgreementDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}